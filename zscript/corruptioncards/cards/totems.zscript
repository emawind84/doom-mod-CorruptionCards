Class CCard_TurboTotem : TotemCard
{
	override void Init()
	{
    Super.Init();
	totemactor = "CCards_Actor_TurboTotem";
	totemtranslation = "CCards_DefaultYellow";
	totemfx = "CCards_Actor_TurboTotemFX";
    tier = 4;
    image = "CARD91";
	}
}

Class CCards_Actor_TurboTotem : CCards_Actor_Totem
{
    Default
    {
        //translation "CCards_DefaultYellow";
        tag "Turbo Totem";
    }

    override void TotemEffect(Actor a)
    {
        a.GiveInventory("CCards_Actor_TurboTotemBuff", 1);
    }
}

Class CCards_Actor_TotemBuffFX : CCards_Actor_FX
{
    Default
    {
        +MISSILE;
        +NOGRAVITY;
        renderstyle "STYLE_ADD";
    }

    override void PostBeginPlay()
    {
        if(target)
        {
            A_SetScale(1.0 + ((target.height - 52) * 0.1));
        }
    }

    virtual void DoWarp()
    {
        Warp(target, 0, 0, target.height/2, flags:WARPF_NOCHECKPOSITION|WARPF_INTERPOLATE);
    }

    override void Tick()
    {
        if(target && target.health > 0)
        {
            DoWarp();
        }
        else
        {
            Destroy();
            return;
        }
        Super.Tick();
    }
}

Class CCards_Actor_TurboTotemFX : CCards_Actor_TotemBuffFX
{
    States
    {
        Spawn:
        TNT1 AAAAAAAA 5
        {
            if(target)
            {
                A_CustomRailgun (0, 0, "", "Yellow", RGF_SILENT | RGF_FULLBRIGHT, 0, 45, "CCards_Boss_RomeroDamagePuff", frandom(0,359), frandom(-90,90), 16+frandom(0.0,32.0), 1, 0.2, 0, "None");
                Warp(target, flags:WARPF_NOCHECKPOSITION);
            }
        }
        stop;
    }
}

Class CCards_Actor_TurboTotemBuff : Powerup
{
    Default
    {
        powerup.duration -1;
    }

    override void Tick()
    {
        if(owner && owner.health > 0)
        {
            if(owner.tics > 1)
            {
                owner.A_SetTics(owner.tics * 0.75);
            }
        }
        Super.Tick();
    }
}

Class CCard_AegisTotem : TotemCard
{
	override void Init()
	{
    Super.Init();
	totemactor = "CCards_Actor_AegisTotem";
	totemtranslation = "CCards_DefaultWhite";
	totemfx = "CCards_Actor_AegisTotemFX";
    tier = 4;
    image = "CARD90";
	}
}

Class CCards_Actor_AegisTotemFX : CCards_Actor_TotemBuffFX
{
    Default
    {
        Alpha 0.6;
        +BRIGHT;
    }

    States
    {
        Spawn:
        TNT1 A 0;
        C_F4 I 2 A_SetScale(scale.x - 1.0, scale.x - 1.0);
        C_F4 IIII 1 A_SetScale(scale.x + 0.2, scale.y + 0.2);
        C_F4 I 0 
        {
            A_FadeIn(0.1);
            A_SetScale(scale.x - 0.8, scale.x - 0.8);
        }
        C_F4 IIII 1 A_SetScale(scale.x + 0.2, scale.y + 0.2);
        C_F4 I 0 
        {
            A_FadeIn(0.1);
        }
        Fade:
        C_F4 I 1 A_FadeOut(0.025);
        loop; 
    }
}

Class CCards_Actor_AegisTotem : CCards_Actor_Totem
{
    Default
    {
        //translation "CCards_DefaultWhite";
        tag "Aegis Totem";
    }

    override void TotemEffect(Actor a)
    {
        a.GiveInventory("CCards_Actor_AegisTotemBuff", 1);
    }
}

Class CCards_Actor_AegisTotemBuff : Powerup
{
    Default
    {
        powerup.duration -1;
    }

    override void ModifyDamage (int damage, Name damageType, out int newdamage, bool passive, Actor inflictor, Actor source, int flags)
	{
        if(passive && (!(flags & DMG_NO_PROTECT) || flags & DMG_FORCED) && damage > 0)
        {
            newdamage = Max(1, damage * 0.25);
        }
    }
}

Class CCard_BrutalTotem : TotemCard
{
	override void Init()
	{
    Super.Init();
	totemactor = "CCards_Actor_BrutalTotem";
	totemtranslation = "CCards_DefaultRed";
	totemfx = "CCards_Actor_BurtalTotemFX";
    tier = 4;
    image = "CARD89";
	}
}

Class CCards_Actor_BrutalTotem : CCards_Actor_Totem
{
    Default
    {
        //translation "CCards_DefaultRed";
        tag "Brutal Totem";
    }
    
    override void TotemEffect(Actor a)
    {
        a.GiveInventory("CCards_Actor_BrutalTotemBuff", 1);
    }
}

Class CCards_Actor_BurtalTotemFX : CCards_Actor_TotemBuffFX
{
    Default
    {
        Alpha 0.25;
        +BRIGHT;
        Translation "CCards_Anger";
    }

    States
    {
        Spawn:
        TNT1 A 0;
        C_F4 J 3 ResetRender();
        C_F4 KL 3;
        C_F4 J 3 ResetRender();
        C_F4 KL 3;
        C_F4 J 3 ResetRender();
        C_F4 KL 3;
        C_F4 J 2 ResetRender();
        C_F4 KL 3;
        stop; 
    }

    void ResetRender()
    {
        A_SetScale(1.0 + ((target.height - 52) * 0.018));
        bXFLIP = (random(0,1)==0); 
    }

    override void PostBeginPlay()
    {
        if(target)
        {
            A_SetScale(1.0 + ((target.height - 52) * 0.018));
        }
    }

    override void DoWarp()
    {
        Warp(target, 0, 0, 0, flags:WARPF_NOCHECKPOSITION|WARPF_INTERPOLATE);
    }

    Override void Tick()
    {
        A_SetScale(scale.x - 0.035, scale.y + 0.035);
        if(target && target.health > 0)
        {
            DoWarp();
        }
        else
        {
            Destroy();
            return;
        }
        Super.Tick();
    }
}

Class CCards_Actor_BrutalTotemBuff : Powerup
{
    Default
    {
        powerup.duration -1;
    }

    override void ModifyDamage (int damage, Name damageType, out int newdamage, bool passive, Actor inflictor, Actor source, int flags)
	{
        if(!passive && (!(flags & DMG_NO_PROTECT) || flags & DMG_FORCED) && damage > 0)
        {
            newdamage = damage * 2.0;
        }
    }
}

Class CCard_ThornsTotem : TotemCard
{
	override void Init()
	{
    Super.Init();
	totemactor = "CCards_Actor_ThornsTotem";
	totemtranslation = "CCards_DefaultOrange";
	totemfx = "CCards_Actor_ThornsTotemFX";
    tier = 4;
    image = "CARD88";
	}
}

Class CCards_Actor_ThornsTotem : CCards_Actor_Totem
{
    Default
    {
        //translation "CCards_DefaultOrange";
        tag "Thorns Totem";
    }

    override void TotemEffect(Actor a)
    {
        a.GiveInventory("CCards_Actor_ThornsTotemBuff", 1);
    }
}

Class CCards_Actor_ThornsTotemBuff : Powerup
{
    Default
    {
        powerup.duration -1;
    }

    override void ModifyDamage (int damage, Name damageType, out int newdamage, bool passive, Actor inflictor, Actor source, int flags)
	{
        if(owner && passive && damage > 0 && source && source.player)
        {
            Actor t = owner.tracer;
            owner.tracer = source;
            for(int i; i<2; i++)
            {
                if(owner)
                {
                    owner.A_SpawnProjectile("CCards_ThornsTotemNeedle", owner.height/2, frandom(-(owner.radius * 0.8),(owner.radius * 0.8)), frandom(-6,6) * owner.Distance2D(owner.tracer) * 0.002, CMF_OFFSETPITCH, frandom(-0.5,0.5), ptr:AAPTR_TRACER);
                }
            }
            if(owner && t)
            {
                owner.tracer = t;
            }
        }
    }
}

Class CCards_ThornsTotemNeedle : Actor
{
    Default
    {
        Projectile;
        Height 6;
        Radius 10;
        Speed 40;
        Renderstyle "STYLE_Add";
        Alpha 0.95;
        Translation "CCards_FireTrap";
        DamageFunction random(2, 4);
        seesound "corruptioncards/thorn";
        +PIERCEARMOR;
    }

    override void BeginPlay()
	{
		GiveInventory("CCards_Token_NotProjectileThrower", 1);
	}

    states
    {
        Spawn:
        TRCR A -1 Bright;
        loop;
        Death:
        TNT1 A 15 A_SpawnItemEx("BulletPuff");
        stop;
        XDeath:
        TNT1 A 15;
        stop;
    }
}

Class CCards_Actor_ThornsTotemFX : CCards_Actor_TotemBuffFX
{
    Default
    {
        Alpha 0.6;
        +BRIGHT;
        +FORCEXYBILLBOARD;
       // +WALLSPRITE;
       // +SPECIALFLOORCLIP
        +ROLLSPRITE;
    }

    States
    {
        Spawn:
        TNT1 A 0;
        C_F4 H 0 
        {
            A_SetScale(scale.x - 1.0, scale.x - 1.0);
            roll = random(0,360);
        }
        C_F4 HHHHHHHHHHHHH 1 A_SetScale(scale.x + 0.04, scale.y + 0.04);
        C_F4 H 15;
        C_F4 HHHHH 1 A_FadeOut(0.1);
        stop;
    }
}

Class CCard_NightTotem : TotemCard
{
	override void Init()
	{
    Super.Init();
	totemactor = "CCards_Actor_NightTotem";
	totemtranslation = "CCards_DefaultGrey";
	totemfx = "";
    tier = 4;
    image = "CARD96";
	}
}

Class CCards_Actor_NightTotem : CCards_Actor_Totem
{
    Default
    {
        //translation "CCards_DefaultGrey";
        tag "Night Totem";
    }

    override void TotemEffect(Actor a)
    {
        a.GiveInventory("CCards_Actor_NightTotemBuff", 1);
    }
}

Class CCards_Actor_NightTotemBuff : Inventory
{
    Default
    {
        inventory.maxamount 1;
    }

    int oldstyle;
    bool wasshadow;
    float oldalpha;

    override void AttachToOwner(Actor a)
    {
        oldstyle = a.GetRenderStyle();
        oldalpha = a.alpha;
        wasshadow = a.bSHADOW;

        a.A_SetRenderStyle(0.0, STYLE_NONE);
        CCards_ActorTools.InvisProperty(a, true);
        Super.AttachToOwner(a);
    }

    override void Tick()
    {
        if(GetAge() == 35)
        {
            if(owner)
            {
                owner.A_SetRenderStyle(oldalpha, oldstyle);
                owner.bSHADOW = wasshadow;
                owner.GiveInventory("CCArds_Actor_NightTotemBuffEnd", 1);
                
                CCards_ActorTools.InvisProperty(owner, false);
            }
            Destroy();
            return;
        }
        Super.Tick();
    }
}


Class CCArds_Actor_NightTotemBuffEnd : Powerup
{
    Default
    {
        powerup.duration 2;
    }

    override void OnDestroy()
    {
        if(owner && owner.CountInv("CCards_Actor_NightTotemBuff") == 0)
        {
            for(int i; i<4; i++)
            {
                owner.A_SpawnItemEx("CCards_Actor_InvisEndEffect", random(0,12), 1, 32, 0, 0, random(1, 7),random(0,360));
            }
        }
        Super.OnDestroy();
    }
}

Class CCard_VileTotem : TotemCard
{
	override void Init()
	{
    Super.Init();
	totemactor = "CCards_Actor_VileTotem";
	totemtranslation = "CCards_VileTotem";
	totemfx = "CCards_Actor_VileTotemFire";
    tier = 5;
    image = "CARD100";
	AddTag("causesresurrection");
	}

    override bool Condition()
	{
		if(CCards_Functions.CountResurrectables() < 5)
		{
			return false;
		}
		return Super.Condition();
	}
}

Class CCards_Actor_VileTotem : CCards_Actor_Totem
{
    Default
    {
        //translation "CCards_DefaultOrange";
        tag "Vile Totem";
    }

    override void TotemEffect(Actor a)
    {
    }

    override void DoTotem()
    {
        if(GetAge() % (35*4) == 0)
		{
            BlockThingsIterator bti = BlockThingsIterator.Create(self, 540);
            
            while (bti.Next())
            {
                let mon = bti.thing;

                if(mon && CCards_Functions.IsLegalMonster(mon) && mon.CanRaise())
                {

                    mon.A_SpawnItemEx(totembufffx, 0, 0, mon.height/2, flags:SXF_NOCHECKPOSITION);
                    RaiseActor(mon);

                    break;
                }
            }
        }
    }
}

Class CCards_Actor_VileTotemFire : CCards_Actor_SpawnFire
{
    Default
    {
        Translation "CCards_VileTotemRez";
        Alpha 0.8;
    }
}