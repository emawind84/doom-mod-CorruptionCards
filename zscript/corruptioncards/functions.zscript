// Useful functions used by the game engine and certain cards

Class CCards_ActorTools play
{
	static clearscope int PointOnLineSide( Vector2 p, Line l ) 
	{
		if ( !l ) return 0;
		return (((p.y-l.v1.p.y)*l.delta.x+(l.v1.p.x-p.x)*l.delta.y) > double.epsilon);
    }

	static bool IsVisible(Actor a)
	{
		if(!a)
		{
			return false;
		}
		//Console.Printf("" .. a.CountInv("CCards_Actor_InvisCounter"));
		if(a.CountInv("CCards_Actor_InvisCounter") > 0)
		{
			return false;
		}

		return (!a.CheckSightOrRange(128, true));
	}

	static void InvisProperty(Actor a, bool add)
	{
		if(!a)
		{
			return;
		}

		if(add)
		{
			a.GiveInventory("CCards_Actor_InvisCounter", 1);
		}
		else
		{
			a.TakeInventory("CCards_Actor_InvisCounter", 1);
		}
	}

	//Returns -1 if the box (normally an actor's radius) intersects a linedef:
    static int BoxOnLineSide( double top, double bottom, double left, double right, Line l ) {
        if ( !l ) return 0;
        int p1, p2;
        if ( l.delta.x == 0 ) {
            // ST_VERTICAL:
            p1 = (right < l.v1.p.x);
            p2 = (left < l.v1.p.x);
            if ( l.delta.y < 0 ) {
                p1 ^= 1;
                p2 ^= 1;
            }
        }
        else if ( l.delta.y == 0 )  {
            // ST_HORIZONTAL:
            p1 = (top > l.v1.p.y);
            p2 = (bottom > l.v1.p.y);
            if ( l.delta.x < 0 )        {
                p1 ^= 1;
                p2 ^= 1;
            }
        }
        else if ( (l.delta.x*l.delta.y) >= 0 )  {
            // ST_POSITIVE:
            p1 = PointOnLineSide((left,top),l);
            p2 = PointOnLineSide((right,bottom),l);
        }
        else {
            // ST_NEGATIVE:
            p1 = PointOnLineSide((right,top),l);
            p2 = PointOnLineSide((left,bottom),l);
        }
        return (p1==p2)?p1:-1;
    }

	static bool CheckClippingLines(Vector3 pos, double cheight, double size) {
        BlockLinesIterator it = BlockLinesIterator.CreateFromPos(pos, cheight, size);
        while (it.Next()) {
            let lline = it.CurLine;
            if (!lline || !(lline.Flags & Line.ML_BLOCKING))
                continue;
            if (BoxOnLineSide(pos.y + size, pos.y - size, pos.x - size, pos.x + size,lline) == -1)
                return true;
        }
        return false;
    }

	static bool CheckClippingBox(Vector3 pos, double height, double size)
	{
		if(CheckClippingLines(pos, height, size))
		{
			return true;
		}

		let s = Level.PointInSector((pos.x, pos.y));

		//Console.Printf(s.floorplane.ZAtPoint(pos.xy) .. "");
		//Console.Printf(s.ceilingplane.ZAtPoint(pos.xy) .. "");

		if(s.floorplane.ZAtPoint(pos.xy) + height > s.ceilingplane.ZAtPoint(pos.xy))
		{
			return true;
		}
		//if(Abs()
		return false;
	}
}

Class CCards_Functions play
{
	static String GetVersion()
	{
		let ev = GetGame();

		return ev.global.ccversion;
	}

	static bool GameDisabled()
	{
		return (Cvar.GetCvar("ccards_disable", null).GetBool());
	}

	static bool GameStarted()
	{
		let ev = GetGame();

		if(ev)
		{
			return ev.isstarted;
		}

		return false;
	}

	static void FreezePlayers(bool onoff)
	{
		if(!Cvar.FindCVar("ccards_selector_nofreeze").GetBool())
        {
            SetPlayerProperty(1, onoff, 4);
        }

		//Console.Printf("" .. onoff);
	}

	static void CardAlert(String s, String sound, int time)
	{
		uint options = CVar.GetCvar("ccards_cardalerts", null).GetInt();

		if(options == 0 || options == 2)
		{
			ThinkerIterator ti = ThinkerIterator.Create("CCards_UIThinker");
			CCards_UIThinker t;
			if(t = CCards_UIThinker(ti.Next()))
			{
				t.SendMessage(s, sound, time);
			}
		}
		
		if(options == 1 || options == 2)
		{
			Console.Printf(s);
			if(options == 1)
			{
				S_Sound(sound, CHAN_7);
			}
		}
	}

	static bool IsDoom1()
	{
		return (Wads.FindLump("DSBOSSIT", 0, Wads.ANYNAMESPACE) == -1);
	}
	
	static CCards_Game GetGame()
	{
		return CCards_Game(EventHandler.Find("CCards_Game"));
	}
	
	static void Log(String s)
	{
		Console.Printf(s);
	}
	
	static void DebugLog(String s)
	{
		if(CVAR.GetCvar("ccards_debuglog").GetBool() && CVAR.GetCvar("ccards_debug").GetBool())
		{
			Console.Printf(s);
		}
	}
	
	static void SelectDeck(int deck)
	{
		let ev = GetGame();
		ev.global.chosendeck = deck;
		CCards_Functions.Log(Stringtable.Localize("$" .. ev.global.vc.decks[deck].deckName) .. "\c- deck selected.");
		//ev.StartGeneration();
	}

	static int GetChosenDeck(void)
	{
		let ev = GetGame();
		if(!ev || !ev.global)
		{
			return 0;
		}
		return ev.global.chosendeck;
	}

	static int GetMaxDecks(void)
	{
		let ev = GetGame();
		return ev.global.vc.decks.Size();
	}

	static String GetDeckInfo(int deck, int mode)
	{
		let ev = GetGame();

		switch(mode)
		{
			Case 0: return Stringtable.Localize("$" .. ev.global.vc.decks[deck].deckName); break;
			Case 1: return Stringtable.Localize("$" .. ev.global.vc.decks[deck].deckDescription); break;
			Case 2: return ev.global.vc.decks[deck].deckGraphic; break;
			Case 3: return "" .. (ev.global.vc.decks[deck].cards.Size()); break;
		}

		return "";
	}

	static bool MasterModeUnlocked()
	{
		return (CCards_CardLog.CountCards() >= 60);
	}

	static void SetGameMode(int mode)
	{
		let ev = GetGame();
		//ev.global.mode = mode;
		switch(mode)
		{
			Case 1: ev.global.rules.SetStandardRules(); break;
			Case 2: ev.global.rules.SetHardcoreRules(); break;
			Case 3: ev.global.rules.SetChaosRules(); break;
			Case 4: ev.global.rules.SetDailyRules(); break;
			Case 5: ev.global.rules.SetCustomRules(); break;
			Case 6:
			if(MasterModeUnlocked())
			{
				ev.global.rules.SetMasterRules(); 
			}
			else
			{
				Console.Printf("\cgMaster Mode has not yet been unlocked! Mode changed to \cfStandard\cg.");
				ev.global.rules.SetStandardRules();
			}
			break;
		}

		ev.global.permacount = ev.global.rules.permaProgression + 1;
		CCards_Functions.Log(ev.global.rules.modename .. "\c- mode selected.");
	}

	static bool IsGameStarted()
	{
		let ev = GetGame();
		return ev.isStarted;
	}

	static Bool IsPermanentChoice()
	{
		let ev = GetGame();
		return ev.permanentChoice;
	}
	
	static Bool IsDescriptionHidden()
	{
		let ev = GetGame();
		return ev.global.rules.concealed;
	}
	
	static String GetGameModeStreakCvar()
	{
		let ev = GetGame();
		return ev.global.rules.cvarname;
	}

	static bool IsConcealedMode()
	{
		let ev = GetGame();
		if(!ev.global)
		{
			return false;
		}
		return ev.global.rules.concealed;
	}

	static String GetGameModeName()
	{
		let ev = GetGame();
		return ev.global.rules.modename.MakeUpper();
	}	

	static bool HasLoadedGame()
	{
		let ev = GetGame();
		return ev.global.hasloaded;
	}	

	static int GetPlayerDeaths(int playerno)
	{
		return Cvar.GetCvar("ccards_deathcounter", players[playerno]).GetInt();
	}	
	
	static Int GetProgress()
	{
		let ev = GetGame();
		return ev.global.progress;
	}

	static Int GetPlayer()
	{
		let ev = GetGame();
		return ev.global.player;
	}
	
	static Int GetDeckSize()
	{
		let ev = GetGame();
		return ev.deck.Size();
	}
	
	static Int GetCardTier(int cardno)
	{
		let ev = GetGame();
		return ev.gen.hand[cardno].tier;
	}
	
	static Int GetDeckCardTier(int cardno)
	{
		let ev = GetGame(); 
		return ev.publicdeck[cardno].tier;
	}
	
	static Int GetHistoryCardTier(int cardno)
	{
		let ev = GetGame(); 
		return ev.global.history[cardno].tier;
	}

	static String ParseCardName(String classname)
	{
		classname.Remove(0, 6);

		String s = Stringtable.Localize("$" .. "CC_CARD_" .. classname);

		if(s == "CC_CARD_" .. classname)
		{
			return "";
		}

		return s;
	}
	
	static String GetCardName(int cardno)
	{
		let ev = GetGame();
		String classname = ev.gen.hand[cardno].GetClassName();

		return ParseCardName(classname);
	}

	static String GetCardDescription(int cardno)
	{
		let ev = GetGame();
		return ev.gen.hand[cardno].GetHint();
	}

	static String GetDeckCardClassName (int cardno)
	{
		let ev = GetGame();
		return ev.publicdeck[cardno].GetClassName();
	}
	
	static String GetDeckCardDescription(int cardno)
	{
		let ev = GetGame();
		String hint = ev.publicdeck[cardno].GetHint();

		if(ev.publicdeck[cardno].isDisabled)
		{
			return  hint .. " \cg(DISABLED)";
		}
		return hint;
	}
	
	static String GetHistoryCardDescription(int cardno)
	{
		let ev = GetGame();
		return ev.global.history[cardno].GetHint();
	}
	
	static String GetCardImage(int cardno)
	{
		let ev = GetGame();
		return ev.gen.hand[cardno].image;
	}
	
	static String GetDeckCardImage(int cardno)
	{
		let ev = GetGame();
		return ev.publicdeck[cardno].image;
	}
	
	static String GetHistoryCardImage(int cardno)
	{
		let ev = GetGame();
		return ev.global.history[cardno].image;
	}
	
	static String GetCardSprite(int cardno)
	{
		let ev = GetGame();
		return ev.gen.hand[cardno].spriteimage;
	}
	
	static String GetDeckCardSprite(int cardno)
	{
		let ev = GetGame();
		return ev.publicdeck[cardno].spriteimage;
	}
	
	static String GetHistoryCardSprite(int cardno)
	{
		let ev = GetGame();
		return ev.global.history[cardno].spriteimage;
	}
	
	static Int GetCardSpriteHeight(int cardno)
	{
		let ev = GetGame();
		return ev.gen.hand[cardno].spriteheight;
	}
	
	static Int GetDeckCardSpriteHeight(int cardno)
	{
		let ev = GetGame();
		return ev.publicdeck[cardno].spriteheight;
	}
	
	static Int GetHistoryCardSpriteHeight(int cardno)
	{
		let ev = GetGame();
		return ev.global.history[cardno].spriteheight;
	}
	
	static String GetCardBackground(int cardno)
	{
		let ev = GetGame();
		return ev.gen.hand[cardno].background;
	}
	
	static String GetDeckCardBackground(int cardno)
	{
		let ev = GetGame();
		return ev.publicdeck[cardno].background;
	}
	
	static String GetHistoryCardBackground(int cardno)
	{
		let ev = GetGame();
		return ev.global.history[cardno].background;
	}
	
	static Int GetGameTime()
	{
		let ev = GetGame();
		if(!ev.isstarted)
		{
			return 0;
		}
		return Level.Time - ev.global.chosenTime;
	}
/*
	static void ChooseCard(int cardno)
	{
		let ev = GetGame();
		ev.CardChosen(cardno);
	}
*/
	static int GetCardStackIndex(Card c)
	{
		let ev = GetGame();
		CCards_Game game = ev;
		int count;

		for(int i; i<game.deck.Size(); i++)
		{
			if(game.deck[i].GetClassName() == c.GetClassName())
			{
				GenericCard g = GenericCard(game.deck[i]);
				GenericCard thisCard = GenericCard(c);
				
				if(!g)
				{
					count++;
					continue;
				}

				if(g.usespecies && GetDefaultByType(thisCard.monsterType).species != "None")
				{
					if(GetDefaultByType(thisCard.monsterType).species == GetDefaultByType(g.monsterType).species)
					{
						count++;
					}
				}
				else
				{
					if(thisCard.monsterType == g.monsterType)
					{
						count++;
					}
				}
			}
		}

		return count;
	}
	
	static string DebugAdd(int cardno)
	{
		let ev = GetGame();

		ev.gen.hand[cardno].stackIndex = CCards_Functions.GetCardStackIndex(ev.gen.hand[cardno]);
		ev.gen.hand[cardno].game = ev;
		ev.deck.Push(ev.gen.hand[cardno]);
		ev.global.collection.Push(ev.gen.hand[cardno]);
		String s = "\cvAdded: \cj" .. ev.gen.hand[cardno].GetHint();
		ev.GenerateCards();

		return s;
	}

	static void DebugCard(int slot, int id)
	{
		let ev = GetGame();
		ev.gen.hand[slot] = ev.gen.cardPool[id];
	}
	
	static Int GetPoolSize()
	{
		let ev = GetGame();
		return ev.gen.cardPool.Size();
	}
	
	static Int GetSeed()
	{
		let ev = GetGame();
		return ev.global.baseseed;
	}
	
	static Int CountCardName(String cardname)
	{
		let ev = GetGame();
		
		int count;
		
		for(int i; i<ev.deck.Size(); i++)
		{
			//Console.Printf(ev.deck[i].GetClassName());
			if(ev.deck[i].GetClassName() == cardname)
			{
				count++;
			}
		}

		//Console.Printf("" .. count);
		
		return count;
	}
	
	static int CountMonsters()
	{
		return level.Total_Monsters;
	}
	
	static int CountMonsterName(Class<Actor> a)
	{
		string replacedname = a.GetClassName();
		replacedname = replacedname.Mid(13);
	
		Class<Actor> b = replacedname;
		ThinkerIterator ti = ThinkerIterator.Create("CCards_MonsterThinker");
		CCards_MonsterThinker t;
		int count;
		
		while (t = CCards_MonsterThinker(ti.Next()))
		{
			if(t.user)
			{
				if(t.user.GetClass() == a || b == a)
				{
				count++;
				}
			}
		}
		
		return count;
	}
	
	static int CountMonsterAncestors(Class<Actor> a)
	{
		ThinkerIterator ti = ThinkerIterator.Create("CCards_MonsterThinker");
		CCards_MonsterThinker t;
		int count;
		
		while (t = CCards_MonsterThinker(ti.Next()))
		{
			if(t.user)
			{
				if(t.user.GetClass() is a)
				{
				count++;
				}
			}
		}
		
		return count;
	}

	static int CountResurrectables()
	{
		ThinkerIterator ti = ThinkerIterator.Create("CCards_MonsterThinker");
		CCards_MonsterThinker t;
		int count;
		
		while (t = CCards_MonsterThinker(ti.Next()))
		{
			if(t.user)
			{
				if(t.user.FindState("Raise", true))
				{
					count++;
				}
			}
		}
		
		return count;
	}

	static Actor RandomPlayer()
	{
		ThinkerIterator ti = ThinkerIterator.Create("CCards_PlayerThinker");
		
		CCards_PlayerThinker t;
		
		Array<Actor> players;
		
		while (t = CCards_PlayerThinker(ti.Next()))
		{
			players.Push(t.user);
		}
		
		if(players.Size()>0)
		{
			return players[random(0, players.Size()-1)];
		}
		return null;
	}

	static Card FindCardByName(String n)
	{
		let ev = GetGame();

		for(int i = 0; i<ev.deck.Size(); i++)
		{
			if(ev.deck[i].GetClassName() == n)
			{
				return ev.deck[i];
			}
			
		}

		return null;
	}

	static Card FindCardByTag(String n)
	{
		let ev = GetGame();

		for(int i = 0; i<ev.deck.Size(); i++)
		{
			if(ev.deck[i].tags.Find(n) != ev.deck[i].tags.Size())
			{
				return ev.deck[i];
			}
		}

		return null;
	}

	static Card FindCardWithTag(String n)
	{
		let ev = GetGame();

		for(int i = 0; i<ev.deck.Size(); i++)
		{
			if(ev.deck[i].CheckTag(n))
			{
				return ev.deck[i];
			}
		}
		
		return null;
	}

	static bool IsSpecialMap()
	{
		String l = level.MapName.MakeUpper();
		if(GameInfo.gametype == GAME_Heretic)
		{
			return(
			l == "E1M8" || 
			l == "E2M8" ||
			l == "E3M8" ||
			l == "E4M6" ||
			l == "E4M8" ||
			l == "E5M8");
		}

		
		return(
		l == "E1M8" || 
		l == "E2M8" ||
		l == "E3M8" ||
		l == "E4M6" ||
		l == "E4M8" ||
		l == "MAP07");
	}

	static bool ActorHasMapSpecial(Actor a)
	{
		if(a.bISMONSTER && a.tid > 0)
		{
			return true;
		}

		return (HasMapSpecial(a.GetClass()));
	}

	static bool HasMapSpecial(Class<Actor> a)
	{
		if(!a)
		{
			return false;
		}
		
		if(IsSpecialMap())
		{		
			if(GetDefaultByType(a).bBOSSDEATH)
			{
				return true;
			}
		}

		return false;
	}

	static bool IsLegalMonster(Actor a)
	{
		if(!a)
		{
			return false;
		}
		
		if(CheckAddedMonster(a.GetClassName()))
		{
			return true;
		}

		if(CheckBannedActor(a.GetClassName()))
		{
			return false;
		}

		// Extra sanity checks
		if((a.radius + a.height) == 0 || 
		a is "Inventory" || 
		a.GetClassName() == "CommanderKeen" ||
		a.GetClassName() == "BossBrain" ||
		//a.GetClassName() == "Sorcerer1" ||
		//a.GetClassName() == "Korax" ||
		a.bFRIENDLY ||
		!a.bISMONSTER)
		{
			return false;
		}

		return true;
	}

	static bool CheckAddedMonster(Class<Actor> t)
	{
		CC_ActorInfo i = GetActorInfo(t.GetClassName());

		if(i && i.newMonster)
		{
			return true;
		}
		return false;
	}

	static bool CheckBannedActor(Class<Actor> t)
	{
		CC_ActorInfo i = GetActorInfo(t);

		if(i && i.excludeActor)
		{
			CCards_Functions.DebugLog("Actor " .. t .. " has been banned by CCARDS.txt.");
			return true;
		}

		return false;
	}

	static CC_ActorInfo GetActorInfo (Class<Actor> n)
	{	
		CCards_Game game = GetGame();
		
		if(!game || !game.global)
		{
			return null;
		}

		CCards_CardList vc = GetGame().global.vc;

		for(int i; i<vc.customactors.Size(); i++)
		{
			if(vc.customactors[i].actor == n)
			{
				return vc.customactors[i];
			}
		}

		return null;
	}

	static CC_GroupInfo GetGroupInfo (String n)
	{	
		CCards_Game game = GetGame();
		
		if(!game || !game.global)
		{
			return null;
		}

		CCards_CardList vc = GetGame().global.vc;

		for(int i; i<vc.customgroups.Size(); i++)
		{
			if(vc.customgroups[i].name == n)
			{
				return vc.customgroups[i];
			}
		}

		return null;
	}

	static bool CheckClearMap(String m)
	{
		CC_MapInfo i = GetMapInfo(m);

		if(i && i.clear)
		{
			CCards_Functions.DebugLog("Map " .. m .. " has been flagged to clear the deck in CCARDS.txt.");
			return true;
		}

		return false;
	}

	static bool CheckBannedMap(String m)
	{
		CC_MapInfo i = GetMapInfo(m);

		if(i && i.banned)
		{
			CCards_Functions.DebugLog("Map " .. m .. " has been banned by CCARDS.txt.");
			return true;
		}

		return false;
	}

	static CC_MapInfo GetMapInfo (String m)
	{
		CCards_CardList vc = GetGame().global.vc;

		for(int i; i<vc.custommaps.Size(); i++)
		{
			if(vc.custommaps[i].mapname == m.MakeUpper())
			{
				return vc.custommaps[i];
			}
		}

		return null;
	}

	static int GetMaxHealth(Actor a)
	{
		if(!a)
		{
			return 0;
		}

		int inv = a.CountInv("CCards_Actor_MaxHealth");

		if(inv > 0)
		{
			return inv;
		}

		return a.GetSpawnHealth();
	}

	static bool IsInsideSector(Sector sec, double x, double y)
    {
        let result = Level.PointInSector((x, y));
       
        if (result == sec)
        {
            double z = sec.floorplane.ZatPoint((x, y));
            return Level.IsPointInLevel((x, y, z));
        }
       
        return false;
    }

	static bool ActorIsKey(Actor a)
	{
		if(!a)
		{
			return false;
		}
		
		if(a is "Key")
		{
			return true;
		}

		String cls = a.GetClassName();

		if(cls.Mid(cls.Length() - 12) ~== "UniversalKey")
		{
			return true;
		}

		if(Actor.GetReplacee(a.GetClass()) is "Key")
		{
			return true;
		}

		return false;
	}

	static vector3 Vec3Lerp(vector3 a, vector3 b, double t)
    {	
		if(t < 0){t = 0;}
		else if (t > 1.0)
		{
			t = 1.0;
		}

        return (a.x + (b.x - a.x) * t,
                a.y + (b.y - a.y) * t,
                a.z + (b.z - a.z) * t);
    }
}

class CCards_IWAD
{
	static String BulletSound(int which)
	{
		switch(GameInfo.gametype)
		{
			Case GAME_Heretic: return (which ? "weapons/gauntletshit" : "weapons/wandhit");
			Case GAME_Hexen: return (which ? "MageLightningFire" : "MageWandFire");
		}

		return (which ? "weapons/sshotf" : "weapons/shotgf");
	}

	static String SpawnEffectActor()
	{
		switch(GameInfo.gametype)
		{
			Case GAME_Heretic: return "TeleportFog";
			Case GAME_Hexen: return "TeleportFog";
		}

		return "ItemFog";
	}

	static String ExplosionSound()
	{
		switch(GameInfo.gametype)
		{
			Case GAME_Heretic: return "misc/timebomb";
			Case GAME_Hexen: return "MageStaffExplode";
		}
		
		return "world/barrelx";
	}
}

class CCards_Projectiles play
{
	static bool IsProjectileDead(Actor a)
	{
		if(!a)
		{
			return true;
		}

		return !(a.bMISSILE);
	}
}

class CCards_UIFunctions ui
{
	static Int GetProgress()
	{
		let ev = GetGame();
		return ev.global.progress;
	}
	
	static bool MasterModeUnlocked()
	{
		return (CCards_CardLog.CountCards() >= 60);
	}

	static String GetNextMap(String prevmap)
	{
		String s = prevmap;

		if(s == "E1M8"){ return "E2M1"; }
		if(s == "E2M8"){ return "E3M1"; }
		if(s == "E3M8"){ return "E4M1"; }
		if(s == "E4M8"){ return "E1M1"; }
		if(s == "MAP30"){ return "MAP01";} 

		if(s.Left(3) == "MAP")
		{
			int i = s.Mid(3, 2).ToInt();
			i++;

			String n = "" .. i;

			if(i<9)
			{
				n = "0" .. n;
			}

			return ("MAP" .. n);
		}

		return "";
	}

	static int DailySeed()
	{
		String s = SystemTime.Format("%j", SystemTime.Now());
		int i = s.ToInt();
		s = SystemTime.Format("%G", SystemTime.Now());
		int y = s.ToInt();

		i = i * y;
		y = 0;

		while(i > y)
		{
			y++;
			i--;
			if(y>9999)
			{
				y = 0;
			}
		}

		return Max(1, y);
	}

	static int GetCardStackIndex(Card c)
	{
		let ev = GetGame();
		CCards_Game game = ev;
		int count;

		for(int i; i<game.deck.Size(); i++)
		{
			if(game.deck[i].GetClassName() == c.GetClassName())
			{
				GenericCard g = GenericCard(game.deck[i]);
				GenericCard thisCard = GenericCard(c);
				
				if(!g)
				{
					count++;
					continue;
				}

				if(g.usespecies && GetDefaultByType(thisCard.monsterType).species != "None")
				{
					if(GetDefaultByType(thisCard.monsterType).species == GetDefaultByType(g.monsterType).species)
					{
						count++;
					}
				}
				else
				{
					if(thisCard.monsterType == g.monsterType)
					{
						count++;
					}
				}
			}
		}

		return count;
	}
	
	static String GetFrameImage(Card c)
	{
		if(c.customFrame != "")
		{
			return c.customFrame;
		}

		return "graphics/selector/cbordn.png";
	}

	static CC_ActorInfo GetActorInfo (Class<Actor> n)
	{	
		CCards_Game game = GetGame();
		
		if(!game || !game.global)
		{
			return null;
		}

		CCards_CardList vc = GetGame().global.vc;

		for(int i; i<vc.customactors.Size(); i++)
		{
			if(vc.customactors[i].actor == n)
			{
				return vc.customactors[i];
			}
		}
		return null;
	}

	static CCards_Game GetGame()
	{
		return CCards_Game(EventHandler.Find("CCards_Game"));
	}

	static String GetTagImage(Card c)
	{
		if(!c)
		{
			return "";
		}

		uint tag = c.cardtag;

		while(tag == Card.TAG_UNDEFINED)
		{
			if(c is "CurseCard")
			{
				tag = Card.TAG_CURSE;
				break;
			}

			if(c is "GenericBuffCard")
			{
				tag = Card.TAG_ENCHANTMENT;
				break;
			}

			if(c is "GenericProjectileModifier")
			{
				tag = Card.TAG_AUGMENT;
				break;
			}

			if(c is "GenericCard")
			{
				tag = Card.TAG_MONSTER;
				break;
			}

			tag = Card.TAG_MISC;
		}

		switch(tag)
		{
			Case Card.TAG_PLAYER: return "graphics/selector/ctag_ply.png";
			Case Card.TAG_MONSTER: return "graphics/selector/ctag_mon.png";
			Case Card.TAG_ENCHANTMENT: return "graphics/selector/ctag_enc.png";
			Case Card.TAG_AUGMENT: return "graphics/selector/ctag_atk.png";
			Case Card.TAG_CURSE: return "graphics/selector/ctag_crs.png";
			Case Card.TAG_WORLD: return "graphics/selector/ctag_wol.png";
			Case Card.TAG_TRAP: return "graphics/selector/ctag_trp.png";
			Case Card.TAG_EVENT: return "graphics/selector/ctag_evn.png";
			Case Card.TAG_MISC: return "graphics/selector/ctag_msc.png";
			Case Card.TAG_NONE: return "";
		}

		return "";
	}
}

class CCards_BuffManager : EventHandler
{
	Array<Class<GenericBuffCard> > buffs;

	CCards_Deck chosendeck;

	override void WorldLoaded (WorldEvent e)
	{
		FindBuffs();
	}

	void FindBuffs()
	{
		let game = CCards_Functions.GetGame();
		
		if(!game || !game.global)
		{
			return;
		}

		if(buffs.Size()>0 && chosendeck == game.global.GetChosenDeck())
		{
			return;
		}

		chosendeck = game.global.GetChosenDeck();

		if(!chosendeck)
		{
			return;
		}

		//Console.Printf(chosendeck.deckName);;

		for(int i; i<chosendeck.cards.Size(); i++)
		{
			if(chosendeck.cards[i] is "GenericBuffCard" && chosendeck.cards[i].GetClassName() != "GenericBuffCard")
			{
				buffs.Push(chosendeck.cards[i]);
			}
		}
	}

	static CCards_BuffManager Get()
	{
		return CCards_BuffManager(EventHandler.Find("CCards_BuffManager"));
	}

	static String ApplyBuff(Class<GenericBuffCard> buff, Actor a)
	{
		if(!buff || !a)
		{
			return "Nothing";
		}

		Object o = new (buff);
		GenericBuffCard buffcard = GenericBuffCard(o);
			
		buffcard.Init();

		if(buffcard.CheckBuff(a))
		{
			buffcard.Buff(a);
		}

		String n = buffcard.buffname;

		o.Destroy();

		return n;
	}

	static String ApplyRandomBuff(Actor a)
	{
		CCards_BuffManager ev = CCards_BuffManager(EventHandler.Find("CCards_BuffManager"));

		if(!ev)
		{
			return "nothing!";
		}

		ev.FindBuffs();

		if(!a || ev.buffs.Size() == 0)
		{
			return "nothing!";
		}

		Array<Class<GenericBuffCard> > tempbuffs;
		tempbuffs.Copy(Get().buffs);

		while(tempbuffs.Size() > 0)
		{
			int r = random(0, ev.buffs.Size()-1);
			Object o = new (ev.buffs[r]);
			GenericBuffCard randomcard = GenericBuffCard(o);
			
			randomcard.Init();

			if(!randomcard.CheckBuff(a))
			{
				tempbuffs.Delete(r);
				continue;
			}

			randomcard.Buff(a);

			String n = randomcard.buffname;

			o.Destroy();
			return n;
		}

		return "nothing!";
	}
	
	static String ApplySeededBuff(Actor a, int seed)
	{
		CCards_BuffManager ev = CCards_BuffManager(EventHandler.Find("CCards_BuffManager"));

		if(!ev)
		{
			return "nothing!";
		}

		ev.FindBuffs();

		if(!a || ev.buffs.Size() == 0)
		{
			return "nothing!";
		}

		int buff;

		while(seed > 0)
		{
			seed--;
			buff++;

			if(buff >= ev.buffs.Size())
			{
				buff = 0;
			}
		}

		Object o = new (ev.buffs[buff]);
		GenericBuffCard randomcard = GenericBuffCard(o);
		
		randomcard.Init();
		randomcard.Buff(a);

		String n = randomcard.buffname;

		o.Destroy();

		return n;
	}


}

class CCards_NameGenerator
{
	static String GetTeamName()
	{
		Array<String> TeamPrefix;
		Array<String> TeamSuffix;
		Array<String> TeamColors;

		String p = Stringtable.Localize("$" .. "CC_TEAMNAMES_PREFIX");
		String s = Stringtable.Localize("$" .. "CC_TEAMNAMES_SUFFIX");
		String c = Stringtable.Localize("$" .. "CC_TEAMNAMES_COLOR");

		p.Split(TeamPrefix, "|", TOK_SKIPEMPTY);
		s.Split(TeamSuffix, "|", TOK_SKIPEMPTY);
		c.Split(TeamColors, "|", TOK_SKIPEMPTY);
		
		return (TeamColors[random(0, TeamColors.Size()-1)] .. TeamPrefix[random(0, TeamPrefix.Size()-1)] .. " " .. TeamSuffix[random(0, TeamSuffix.Size()-1)]);
	}
}

class CCards_TranslationHandler play
{
	static void SetTranslation(Actor a, String translation)
	{
		if(a)
		{
			String s;

			switch(Gameinfo.gametype)
			{
				Case GAME_Doom:
				s = "_Doom";
				break;

				Case GAME_Heretic:
				s = "_Heretic";
				break;
			}

			a.A_SetTranslation(translation .. s);
		}
	}
}