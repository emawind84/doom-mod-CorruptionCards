Class Card play
{	
	CCards_Game game;
	
	bool started;
	bool nopermanent;
	bool isDisabled;
	bool alwaysoffer;
	
	bool effectPlayers;
	bool effectProjectiles;
	bool effectMonsters;
	bool effectWorld;
	bool wildcard; // Wild cards are special cards with very specific conditions

	Array<String> tags; // Tags for synergy/condition purposes. Set in Init

	uint cardtag; // Card tag (icon at the bottom right of the card image) to use
	string customFrame; // Card frame graphic

	const TAG_UNDEFINED = 0;
	const TAG_PLAYER = 1;
	const TAG_MONSTER = 2;
	const TAG_ENCHANTMENT = 3;	
	const TAG_AUGMENT = 4;
	const TAG_CURSE = 5;
	const TAG_WORLD = 6;
	const TAG_TRAP = 7;
	const TAG_EVENT = 8;
	const TAG_NONE = 9;
	const TAG_MISC = 99;
	
	bool customsprite; // Custom sprite has been set up by CCARDs lump

	bool chosen; // Card has been chosen by the player
	
	bool canStack; // Card can be collected multiple times.
	uint stackIndex; // Total amount of cards collected. Useful for customizing how effects stack.
	uint triggeramount;
	
	uint tier;
	uint priority; // Order of card effects. Higher numbers are lower priority. 0 = no ordering.

	string description; // Card description displayed in the selector. If defined in LANGUAGE, does not get used.
	string details; // In depth card description.
	string image; // The card image that will be displayed in the selector.
	string background; // Background image of the card.
	string spriteimage; // The sprite image automatically generated by the game (used for generic monster cards).
	int spriteheight; // Used to try to align the sprite in the selector better.
		
	virtual void Init(){} // Ran by the game whenever a card is looked at to be added to the pool.
	
	virtual bool Condition(){return true;} // Condition to be picked out the card pool.
	
	virtual void PreGameStart(){} // Before game start. Executed by main game handler.
	
	virtual void OnDeath(Actor a){} // Death
	virtual void OnGameStart(Actor a){} // Execute on game start
	virtual void OnSpawn(Actor a){} // Spawn/Respawn
	virtual void OnRespawn(Actor a){} // Revive
	virtual void OnTick(Actor a){} // Tick	
	
	// Returns true if this card is the top card of the stack (of this card type).
	virtual bool isStackPrimary()
	{
		if(CCards_Functions.GetCardStackIndex(self) != stackIndex+1)
		{
			return false;
		}
		return true;
	}

	// Used by the generator to attempt to get a monster's sprite.
	virtual String GetValidSprite (Actor a)
	{
		CC_ActorInfo ai = CCards_Functions.GetActorInfo(a.GetClassName());

		if(ai && ai.cardsprite)
		{
			customsprite = true;
			image = ai.cardsprite;
			return "TNTA0";
		}

		String i;
		
		// Try to get a nice attacking frame first
		i = IsValidSprite(a, "Melee"); 
		
		// If that fails, try for the frame of their current state
		if(i == ""){i = IsValidSprite(a, "-");} 
		
		// Try some others
		if(i == ""){i = IsValidSprite(a, "Spawn");} 
		if(i == ""){i = IsValidSprite(a, "Pain");}

		return i;
	}
	
	String IsValidSprite(Actor a, Statelabel statename)
	{
		String i;
		
		if(statename == "-")
		{
			i = TexMan.GetName(a.curstate.GetSpriteTexture(1, 0, (1.0, 1.0)));
		}
		else
		{
			if(!a.FindState(statename))
			{
			return "";
			}
			i = TexMan.GetName(a.FindState(statename).GetSpriteTexture(1, 0, (1.0, 1.0)));
		}

		let t = i.Left(4);
		
		if(t == "TNT1" || t == "####" || t == "PLYC")
		{	
			return "";
		}
		
		return i;
	}

	String GetHint()
	{
		String n = GetClassName();
		n.ToUpper();
		n.Replace("CCARD_", "");
		String l = Stringtable.Localize("$" .. "CC_HINT_" .. n);

		l = TranslateSpecial(l);

		if(l == "CC_HINT_" .. n)
		{
			return description;
		}
		return l;
	}

	virtual String TranslateSpecial(String s)
	{
		return s;
	}

	bool AddTag(String s)
	{
		if(tags.Find(s) != tags.Size())
		{
			return false;
		}

		tags.Push(s);
		return true;
	}

	bool CheckTag(String s)
	{
		for(int i; i<tags.Size(); i++)
		{
			if(tags[i] ~== s)
			{
				return true;
			}
		}
		return false;
	}

	// Check if the game has any monsters/cards that can resurrect
	bool CheckResurrectMonsters (void)
	{
		if(CCards_Functions.FindCardWithTag("causesresurrection"))
		{
			return true;
		}

		for(int i; i<game.gen.mapmonsters.Size(); i++)
		{
			if(game.gen.mapmonsters[i].ResolveState("Heal"))
			{
				return true;
			}
		}

		return false;
	}
}

/* diamond of death incoming
Class Wildcard : Card
{
}*/

Class GenericCard : Card
{
	Actor monsterFigure; // An actor in the level used as a base for collecting sprite data etc. DO NOT USE AFTER MAP CHANGE.
	
	Class<Actor> monsterType; // A pointer to the type of monster. This is safe to read at all times.
	private String monsterName;
	String parsedname; // Set in the generator so the UI can spy it
	String species;
	String group;
	bool useSpecies;

	override String GetValidSprite(Actor a)
	{
		if(usespecies)
		{
			//Console.Printf("found species");
			CC_ActorInfo ai = CCards_Functions.GetActorInfo(a.GetClassName());

			if(ai && ai.group)
			{
				let gi = CCards_Functions.GetGroupInfo(ai.group);
				if(gi && gi.image)
				{
				//Console.Printf("image is" .. gi.image .. " group is " .. gi.name);
				customsprite = true;
				image = gi.image;
				return "TNTA0";
				}
			}
		}

		return Super.GetValidSprite(a);
	}

	override String TranslateSpecial(String s)
	{
		s.Replace("#", GetMonsterName());
		return s;
	}

	string GetMonsterName()
	{
		if(useSpecies && group != "")
		{
			return Stringtable.Localize("$".. group);
		}

		if(useSpecies && monsterType && GetDefaultByType(monsterType).species != "None")
		{
			return monsterName .. " " .. Stringtable.Localize("$".. "CC_ANDSPECIES");
		}

		return monsterName;
	}
	
	override void Init()
	{
		Super.Init();
	}
	
	// Functions used by the generator
	void SetMonsterType(Actor m)
	{
		monsterFigure = m;
		monsterType = m.GetClass();
		if(monsterFigure.GetTag() == "")
		{
			monsterName = m.GetClassName();
		}
		else
		{
			monsterName = monsterFigure.GetTag();

			for(int i; i<monsterName.Length(); i++)
			{
				if(monsterName.CharCodeAt(i) == 92)
				{
					if(monsterName.Length() > i + 1 && monsterName.CharCodeAt(i + 1) == 99)
					{
						monsterName.Remove(i, 3);
					}
				}
			}
		}
		SetFigureImage(m);
		spriteheight = m.height;

		if(monsterFigure)
		{
			species = monsterFigure.species;
		}		
	}
	
	virtual void SetTier()
	{
		if(!monsterFigure)
		{
			return;
		}
		if(monsterFigure.health > 0)
		{
			tier = min(5, max(1, Round((monsterFigure.health / 100))));
		}
		else
		{
			tier = 1;
		}
	}

	void ReverseTiering()
	{
		switch(tier)
		{
			Case 1: tier = 5;
			Case 2: tier = 4;
			Case 3: tier = 3;
			Case 4: tier = 2;
			Case 5: tier = 1;
		}
	}
			
	void SetFigureImage(Actor a)
	{
		spriteimage = GetValidSprite(a);
	}
	
	override bool Condition()
	{	
		return true;
	}
	
	bool MonsterCount()
	{
		return CCards_Functions.CountMonsterName(monsterFigure.GetClassName());
	}

	bool CheckMonsterGroup(String classname)
	{
		if(CCards_Functions.CheckBannedActor(classname))
		{
			return false;
		}

		CC_ActorInfo ai = CCards_Functions.GetActorInfo(classname);
		
		if(ai && ai.group == group)
		{
			return true;
		}

		return false;
	}
}

// Generalized "effect one monster in the map" Curse card.
Class CurseCard : Card
{
	Class<Inventory> curseinv;

	int cursecount;
	bool mapspecialsafe;

	override void Init()
	{
	effectWorld = true;
	canStack = true;
	cursecount = 0;
	}

	override bool Condition()
	{
		if(CCards_Functions.IsSpecialMap() && !mapspecialsafe)
		{
			return false;
		}

		return (CCards_Functions.CountMonsters() > 1);
	}

	override void OnGameStart(Actor a)
	{
		cursecount++;
	}

	override void OnTick(Actor a)
	{
		if(CCards_Functions.GetGameTime() < 35)
		{
			return;
		}

		if(cursecount > 0)
		{
			Array<Actor> monsters;
			Actor t;
			int largesthp;

			ThinkerIterator ti = ThinkerIterator.Create("Actor");

			while (t = Actor(ti.Next()))
			{
				if(!CCards_Functions.IsLegalMonster(t) || (CCards_Functions.HasMapSpecial(t.GetClass()) && !mapspecialsafe))
				{
					continue;
				}

				monsters.Push(t);
				largesthp = Max(largesthp, t.default.health);
			}

			while(monsters.Size()>0)
			{
				int r = random(0, monsters.Size()-1);

				if(!monsters[r] || monsters[r].CountInv(curseinv)>0 || monsters[r].health < 1)
				{
					monsters.Delete(r);
					continue;
				}

				if(monsters[r].health >= largesthp)
				{
					monsters[r].GiveInventory(curseinv, 1);
					
					cursecount--;
					return;
				}

				largesthp = largesthp - (largesthp/2);
			}
			
			cursecount--;
		}
	}
}


// These cards have a function that is triggered before cards are added to the collection.
// For niche cards that want to alter the deck.
Class DeckOperationCard : Card
{
	virtual void Operation() {}

	virtual bool PostGenCondition() 
	{
		return true;
	}

	virtual void PostGenSetup()
	{
	}
}

// This class is used to catalogue buffs you might want to be selected by cards that pick a "Random Buff".
// See the Resurrection Gift card and all the other buff cards for examples.
Class GenericBuffCard : GenericCard
{
	String buffname;

	virtual void Buff(actor a)
	{
	}
	
	override void OnSpawn(actor a)
	{	
		Buff(a);
	}
	
	override void OnRespawn(actor a)
	{	
		Buff(a);
	}

	bool CheckBuff(Actor a)
	{
		if(!a)
		{
			return false;
		}

		CCards_Actor_BuffManager b = CCards_Actor_BuffManager(a.FindInventory("CCards_Actor_BuffManager"));
		
		if(!b)
		{
			b = CCards_Actor_BuffManager(a.Spawn("CCards_Actor_BuffManager", a.pos));
			b.AttachToOwner(a);
		}

		if(b)
		{
			if(b.buffs.Find(GetClassName()) != b.buffs.Size())
			{
				return false;
			}
			else
			{
				b.buffs.Push(GetClassName());
				return true;
			}
		}

		return false;
	}
}

class CCards_Actor_BuffManager : Inventory
{
	Array<String> buffs;
}

// This class is used mainly as a wrapper for changing monster projectiles
Class GenericProjectileModifier : GenericCard
{
	virtual void OnProjectileSpawn(Actor a){} // Spawn/Respawn
	virtual void OnProjectileTick(Actor a){} // Tick	
	virtual void OnProjectileDeath(Actor a){} // Death

	CCards_Monster GetProjectileUser()
	{
		return game.global.observer.FindProjectileThrower(monsterType.GetClassName());
	}
	
	override void Init()
	{
	Super.Init();
	effectProjectiles = true;
	}
	
	override bool Condition()
	{
		if(game.global.observer.FindProjectileThrower(monsterType.GetClassName()))
		{
			//Console.Printf(monsterType.GetClassName() .. " shoots projectiles");
			return true;
		}
		
	return false;
	}
	
	bool isMonstersProjectile(Actor a)
	{
		if(!a)
		{
			return false;
		}
		if(!a.target)
		{
			//Console.Printf("no target");
			return false;
		}

		if(group != "" && useSpecies)
		{
			return CheckMonsterGroup(a.target.GetClassName());
		}
		
		if(useSpecies && a.target.species != "None" && GetDefaultByType(monsterType).species == a.target.species)
		{
			return true;
		}
		else
		{
			if(a.target.GetClassName() == monsterType.GetClassName())
			{
				//Console.Printf("legal classname");
				return true;
			}
		}
		//Console.Printf("illegal monster");
		return false;
	}
	
	static bool isSafeProjectile(Actor a)
	{
		if(a && a.Speed > 0 && 
		a.bNOINTERACTION == false && 
		a.bNOCLIP == false &&
		!a.IsZeroDamage())
		{
			return true;
		}
		return false;
	}
	
	override void OnSpawn(Actor a)
	{
		if(isMonstersProjectile(a))
		{
			OnProjectileSpawn(a);
		}
	}
	
	override void OnTick(Actor a)
	{
		if(isMonstersProjectile(a))
		{
			OnProjectileTick(a);
		}
	}
	
	override void OnDeath(Actor a)
	{
		if(isMonstersProjectile(a))
		{
			OnProjectileDeath(a);
		}
	}
}

mixin class WorldEvent
{
	int totals;
		
	bool EventTrigger()
	{
		if(Level.Found_Items + Level.Found_Secrets + Level.Killed_Monsters >= totals)
		{
			return true;
		}
	return false;
	}
	
	void SetEventTotals()
	{
		totals = random((Level.Total_Monsters + (Level.Total_Items/2) + Level.Total_Secrets) / 10, (Level.Total_Monsters + (Level.Total_Items/2) + Level.Total_Secrets));
	}
}


// Generalized totem card
Class TotemCard : Card
{
	bool mapspecialsafe;
	Class<CCards_Actor_Totem> totemactor;
	Class<Actor> totemfx;
	String totemtranslation;

	override void Init()
	{
	effectWorld = true;
	canStack = true;
	totemcount = 0;
	totemactor = "CCards_Actor_Totem";
	totemtranslation = "";
	image = "TNT1A0";
	totemfx = "";
	cardtag = TAG_TRAP;
	}

	override bool Condition()
	{
		if(CCards_Functions.IsSpecialMap() && !mapspecialsafe)
		{
			return false;
		}

		return (CCards_Functions.CountMonsters() > 1);
	}

	override void OnGameStart(Actor a)
	{
		totemcount += 1;//Clamp((CCards_Functions.CountMonsters() / 70), 1, 3);
	}

	Array<Actor> monsters;
	uint totemcount;

	override void OnTick(Actor a)
	{
		if(CCards_Functions.GetGameTime() < 2 || totemcount <= 0)
		{
			return;
		}

		if(totemcount>0)
		{
			monsters.clear();
			Actor t;

			ThinkerIterator ti = ThinkerIterator.Create("Actor");
			int largestgroup = 100;

			while (t = Actor(ti.Next()))
			{
				if(!CCards_Functions.IsLegalMonster(t) || (CCards_Functions.HasMapSpecial(t.GetClass()) && !mapspecialsafe))
				{
					continue;
				}

				monsters.Push(t);
			}

			while(monsters.Size()>0 && totemcount > 0)
			{
				int r = random(0, monsters.Size()-1);
				int nearcount = NearbyMonsters(monsters[r]);

				if(!monsters[r] || monsters[r].CountInv("CCards_Actor_HeldTotem") > 0 || nearcount == 0)
				{
					monsters.Delete(r);
					continue;
				}

				if(nearcount >= largestgroup * 0.1)
				{
					//monsters[r].GiveInventory(curseinv, 1);
					//monsters[r].A_Die();
					CCards_Actor_Totem spawnedtotem = CCards_Actor_Totem(Actor.Spawn(totemactor, monsters[r].pos));
					if(spawnedtotem)
					{
						monsters[r].GiveInventory("CCards_Actor_HeldTotem", 1);
						spawnedtotem.target = monsters[r];
						spawnedtotem.fxtranslation = totemtranslation;
						spawnedtotem.totembufffx = totemfx;
					}

					totemcount--;
					continue;
				}

				largestgroup--;
			}
			
		}
	}

	int NearbyMonsters(Actor a)
	{
		int count;

		for(int i; i<monsters.Size(); i++)
		{
			if(monsters[i].Distance2D(a) < 640 && monsters[i] != a)
			{
				count++;
			}
		}
		return count;
	}
}


class CCards_Actor_HeldTotem : CCards_Token {}

class CCards_Actor_Totem : Actor
{
	Default
	{
		Health 150;
		Radius 1;
		Height 1;
		mass 2000;
		+THRUACTORS;
		+NOGRAVITY;
		-SOLID;
		+MISSILE;
		+NOTARGETSWITCH;
		+NOBLOOD;
		+BRIGHT;
	}

	String fxtranslation;
	Class<Actor> totembufffx;
	uint teleportchance;

	states
	{
		Spawn:
		C_TM ABCD 5;
		loop;
		Death:
		TNT1 A 50
		{
			A_StartSound("corruptioncards/petrifydeath");
			A_SpawnItemEx("CCards_Actor_Shockwave", 0, 0, 32);
			for(int i; i<40; i++)
			{
				A_SpawnItemEx("CCards_Actor_TotemBit", 0, 0, random(10, 32), frandom(5, 10), 0, frandom(-5, 8), random(0, 360));
			}
		}
		//C_F0 VWXYZ 4;
		stop;
	}

	override void Tick()
	{
		bMISSILE = false;
		
		if(target && target.health > 0 && bTHRUACTORS && !target.player)
		{
			Warp(target, 0, 0, target.height + 2, flags:WARPF_NOCHECKPOSITION|WARPF_COPYINTERPOLATION);
		}
		else
		{
			if(teleportchance > 1 && random(teleportchance, 5) >= teleportchance)
			{
				teleportchance-=2;
				CCards_MonsterThinker t;

				ThinkerIterator ti = ThinkerIterator.Create("CCards_MonsterThinker");

				Array<Actor> mons;
				while (t = CCards_MonsterThinker(ti.Next()))
				{
					if(t.user && t.user.health > 1 && t.user.CountInv("CCards_Actor_HeldTotem") == 0)
					{
						mons.Push(t.user);
					}
				}

				if(mons.Size() > 0)
				{
					target = mons[random(0, mons.Size() - 1)];
					A_SpawnItemEx("CCards_Actor_TeleportFogSound", flags:SXF_NOCHECKPOSITION);
				}
			
				Super.Tick();
				return;
			}

			if(bTHRUACTORS)
			{
				target = null;
				A_SetSize(16, 28, false);
				bTHRUACTORS = false;
				bNOGRAVITY = false;
				bSHOOTABLE = true;
				if(GetRenderStyle() == STYLE_NONE)
				{
					A_SetRenderStyle(1.0, STYLE_Normal);
					Spawn("CCards_Actor_IllusionBreak", pos);
					for(int i; i<4; i++)
					{
						A_SpawnItemEx("CCards_Actor_InvisEndEffect", random(0,12), 1, 0, 0, 0, random(1, 7),random(0,360));
					}
				}
			}
		}

		if(health > 0)
		{	
			if(GetAge() % 35 == 0)
			{
				DoTotem();
			}

			if(GetRenderStyle() == STYLE_NONE)
			{
				Super.Tick();
				return;
			}

			int age = GetAge() % (35 * 2);

			if(age == 0)
			{
				A_StartSound("corruptioncards/totem", attenuation: 0.7);
			}

			if(!CheckSightOrRange(1800, true))
			{
				switch(age)
				{
					Case 35: SpawnFX("CCards_Actor_TotemFX", 8, 0); break;
					Case 30: SpawnFX("CCards_Actor_TotemFX", 7, 0); break;
					Case 25: SpawnFX("CCards_Actor_TotemFX", 6, 0); break;
					Case 20: SpawnFX("CCards_Actor_TotemFX", 5, 0); break;
					Case 15: SpawnFX("CCards_Actor_TotemFX", 4, 0); break;
					Case 10: SpawnFX("CCards_Actor_TotemFX", 3, 0); break;
					Case 5: SpawnFX("CCards_Actor_TotemFX", 2, 0); break;
					Case 0: SpawnFX("CCards_Actor_TotemFX", 1, 0); break;
				}
			}
		}
		
		Super.Tick();
	}

	virtual void DoTotem()
	{
		BlockThingsIterator bti = BlockThingsIterator.Create(self, 540);
		
				while (bti.Next())
				{
					let mon = bti.thing;

					if(mon && CCards_Functions.IsLegalMonster(mon) && mon.health > 0)
					{
						TotemEffect(mon);

						if(CCards_ACtorTools.IsVisible(mon))
						{
							mon.A_SpawnItemEx(totembufffx, 0, 0, mon.height/2, flags:SXF_NOCHECKPOSITION);
						}
					}
				}
	}

	override int TakeSpecialDamage(Actor inflictor, Actor source, int damage, Name damagetype)
	{
		if(source && source.bISMONSTER)
		{
			return 0;
		}

		return damage;
	}

	void SpawnFX(Class<Actor> a, int dist, int ang)
	{
		for(int i; i<60; i++)
		{
			bool spawned;
			actor act;
			[spawned, act] = A_SpawnItemEx(a, 76 * dist, 0, 16, 0, 0, -(dist * 0.1), angle:(i*6) + ang, flags:SXF_ABSOLUTEANGLE|SXF_NOCHECKPOSITION);
			if(spawned && act)
			{
				CCards_TranslationHandler.SetTranslation(act, fxtranslation);
			}
		}
		//A_SpawnItemEx("BigTree", 640, flags:SXF_NOCHECKPOSITION); 
	}

	override void PostBeginPlay()
	{
		CCards_TranslationHandler.SetTranslation(self, fxtranslation);
	}

	virtual void TotemEffect(Actor a)
	{

	}
}

class CCards_Actor_TotemBit : Actor
{
	Default
	{
		+MISSILE;
		+THRUACTORS;
		+NOBLOCKMAP;
		gravity 1.5;
		radius 5;
		height 5;
	}

	states
	{
		Spawn:
		C_TM E 0;
		C_TM E -1
		{
			frame = random(4,7);
		}
	}
}

class CCards_Actor_TotemFX : CCards_Actor_FX
{
	Default
	{
		+BRIGHT;
		+ROLLSPRITE;
		renderstyle "STYLE_ADD";
		alpha 0.5;
		scale 0.75;
	}

	states
	{
		Spawn:
		C_F3 IJ 1;
		C_F3 KJI 3;
		stop;
	}

	override void PostBeginPlay()
	{
		if(pos.z >= ceilingz - 32)
		{
			SetOrigin((pos.x, pos.y, ceilingz - 32), false);
		}
	}

}

class CCards_Actor_TotemRadiusFX : CCards_Actor_TotemFX
{
	Default
	{
		alpha 0.85;
		scale 0.75;
	}

	states
	{
		Spawn:
		C_F3 I 0;
		C_F3 I 0 A_Stop;
		C_F3 I 3 A_FadeOut(0.5);
		stop;
	}
}