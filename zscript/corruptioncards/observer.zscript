// Classes that "learn" what monsters and projectile exist over the course of a run. And some other niche stuff.

Class CCards_Monster
{
	Class<Actor> projectile;
	Class<Actor> monsterClass;
	String attackType;
	bool unsafeProjectile;
}

Class CCards_Token : Inventory
{
	Default
	{
		+Inventory.UNDROPPABLE;
		+Inventory.UNTOSSABLE;
	}
}

Class CCards_Token_NotProjectileThrower : CCards_Token
{
}

Class CCards_Observer : StaticEventHandler
{
	CCards_Global global;

	Override void WorldLoaded(WorldEvent e)
	{	
		if(Level.MapName == "TITLEMAP" || CCards_Functions.GameDisabled())
		{
			return;
		}

		/*
		ThinkerIterator ti = ThinkerIterator.Create("Thinker");
		Thinker t;

		int count;
			
		while (t = Thinker(ti.Next()))
		{
			count++;
		}

		Console.Printf(count .. "");
		*/

		global = CCards_Global.Get();
		global.observer = self;
	}

	override void NewGame()
	{
		CCards_MonsterCounter c = CCards_MonsterCounter.Get();
		if(c)
		{
			c.Destroy();
		}
	}

	Override void WorldUnloaded (WorldEvent e)
	{
		CCards_Game g = CCards_Functions.GetGame();

		if(e.isSaveGame || !g || !g.isstarted || !g.global)
		{
			return;
		}

		TrackMonsters();

		if(g.global.GetChosenDeck() && g.global.GetChosenDeck().wildcardcount == 0)
		{
			return;
		}

		if(g.isStarted)
		{
			if(random(0, 2) == 0 || Level.Found_Secrets >= Level.Total_Secrets)
			{
				g.global.wildscore++;
			}
		}

		//Console.Printf(g.global.scoreneeded .. ", have " .. g.global.wildscore);

		if(g.global.wildscore >= g.global.scoreneeded)
		{
			g.global.wildscore = 0;
			g.global.ResetWildScore();

			if(!g.global.rules.nowildcards)
			{
				g.global.spawnwildcard = true;
				//Console.Printf("success");
			}
		}

		
		if(global.rules.forcedwildcard > 0 && ((global.progress) % (g.global.rules.forcedwildcard-1) == 0))
		{
			//Console.Printf("woeoFDGHGFHFHeo");
			//g.global.spawnwildcard = true;
			g.global.wildcards++;
		}
	}

	void TrackMonsters()
	{
		let c = CCards_MonsterCounter.Get();

		if(!c)
		{
			return;
		}

		ThinkerIterator ti = ThinkerIterator.Create("Actor");
				
		Actor t;
				
		while (t = Actor(ti.Next()))
		{
			if(CCards_Functions.IsLegalMonster(t) && t.health > 0 && !t.bNOINTERACTION)
			{
				c.monsters.Push(t.GetClass());
			}
		}
	}

	Override void WorldThingSpawned(WorldEvent e)
	{
		if(!global || !e.Thing)
		{
			return;
		}

		// Check if is a legit projectile and not some weird actor checker
		if(e.Thing.bMissile && e.Thing.bNoTeleport && e.Thing.target)
		{
			if(e.Thing.target.bIsMonster || e.Thing.player)
			{
				AddProjectileUser(e.Thing);
			}
		}
	}

	void AddProjectileUser(Actor a)
	{
		if(!a.bMISSILE || 
		//!a.bACTIVATEIMPACT || disabled as of 3.4
		//!a.bACTIVATEPCROSS || 
		a.speed == 0 || 
		!a.target || 
		a.damage == 0 ||
		CCards_Projectiles.IsProjectileDead(a))
		{
			return;
		}
		
		if(!a.target.bISMONSTER ||
		a.target.bFRIENDLY ||
		a.target.player ||
		a.target.bREFLECTIVE || 
		a.CountInv("CCards_Actor_Reflected") > 0 || 
		a.target.CountInv("CCards_Token_NotProjectileThrower") > 0 ||
		a.CountInv("CCards_Token_NotProjectileThrower"))
		{
			return;
		}
		
		bool unsafe;

		if(a.Distance2D(a.target) > (a.target.radius + 8) * 1.0)
		{
			//Console.Printf("Probably a bad projectile!");
			unsafe = true;
		}

		AddNewProjectileUser(a.target.GetClass(), a.GetClass(), unsafe);
	}

	CCards_Monster GetMonster(class<Actor> monsterclass)
	{
		if(!global)
		{
			return null;
		}
		
		for(int i = 0; i < global.foundMonsters.Size(); i++)
		{
			if(global.foundMonsters[i].monsterclass == monsterclass)
			{
				return global.foundMonsters[i];
			}
		}

		CCards_Monster pt = CCards_Monster(new ("CCards_Monster"));
		pt.monsterClass = monsterclass;
		global.foundMonsters.Push(pt);
		//Console.Printf(monsterclass.GetClassName());
		return pt;
	}

	void AddNewProjectileUser(Class<Actor> monsterclass, Class<Actor> projectileclass, bool unsafe)
	{
		CCards_Monster pt = GetMonster(monsterclass);
		if(pt && !pt.projectile)
		{
			pt.projectile = projectileclass;
			CCards_Functions.DebugLog("Added projectile thrower " .. monsterclass.GetClassName() .. " - " .. projectileclass.GetClassName());
		}
		pt.unsafeProjectile = unsafe;
	}

	static bool MonsterHasReplacedAttack (Class<Actor> ap)
	{
		let m = FindMonster(ap);

		if(m)
		{
			return (m.attackType != ""); 
		}

		return false;
	}

	static bool MonsterHasHitscanAttack (Class<Actor> ap)
	{
		let m = FindMonster(ap);

		if(m)
		{
			return (m.attackType == "hitscan" || m.attackType == "railgun"); 
		}

		return false;
	}


	static CCards_Monster FindMonster(Class<Actor> ap)
	{
		let ev = CCards_Functions.GetGame();

		for(int i = 0; i<ev.global.foundMonsters.Size(); i++)
		{
			if(ev.global.foundMonsters[i].monsterClass == ap)
			{
				return ev.global.foundMonsters[i];
			}
		}

		return null;
	}

	static CCards_Monster FindProjectileThrower(Class<Actor> ap)
	{
		let mon = FindMonster(ap);
		if(mon && mon.projectile)
		{
			return mon;
		}

		return null;
	}
/*
	override void WorldThingDamaged (WorldEvent e) 
	{
		if(e.Thing)
		{
			Console.Printf(e.inflictor.GetClassName() .. " - " .. e.DamageSource.GetClassName());
		}
	}
*/
	override void WorldThingDied (WorldEvent e)
	{
		if(!e.Thing)
		{
			return;
		}

		if(e.Thing.bISMONSTER && e.Thing.target)
		{
			CCards_Actor_Treachery t = CCards_Actor_Treachery(e.Thing.Target.FindInventory("CCards_Actor_Treachery"));
			if(t)
			{
				t.Trigger();
			}
		}

		if(e.Thing.player)
		{
			if(e.inflictor && e.Thing.target)
			{
				if(e.Thing.target.CountInv("CCards_Actor_AssassinBuff") > 0)
				{
					CCards_Functions.CardAlert("\ca" .. e.Thing.player.GetUserName() .. " \cawas assassinated by the " .. e.Thing.target.default.GetTag() .. "\ca!", "corruptioncards/assassinated", 0);
				}
			}
		}
	}

}

Class CCards_MonsterCounter : Thinker
{
	Array<Class<Actor> > monsters;

	static CCards_MonsterCounter Get()
	{
		ThinkerIterator ti = ThinkerIterator.Create("CCards_MonsterCounter", Thinker.STAT_STATIC);
        CCards_MonsterCounter counter;

        if(counter = CCards_MonsterCounter(ti.Next()))
        {
            return counter;
        }

        counter = new("CCards_MonsterCounter");
        return counter;
	}

	override void PostBeginPlay() 
    {
        ChangeStatNum(STAT_STATIC);
	}
}
