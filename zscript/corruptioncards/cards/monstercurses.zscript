Class CCard_ClownCarMonster : CurseCard
{
	override void Init()
	{
	tier = 4; 
	description = "One monster is cursed. It explodes into a miniature army.";
	image = "CARD37";
	background = "";
	curseinv = "CCards_Actor_ClownCarCurse";
	addtag("newspawn");
	AddTag("hiddensurprise");
	Super.Init();
	}
}

Class CCards_Actor_ClownCarCurse : powerup
{
	Default
	{
		powerup.duration 0x7FFFFFFF;
	}

	override void OwnerDied()
	{
		if(!owner)
		{
			return;
		}

		if(owner.health < -900000)
		{
			Destroy();
			return;
		}

		owner.Spawn("CCards_Actor_ClownCarCurseEffect", owner.pos);

		int amount = Max(5, 30 - (owner.default.health / 35));

		//Console.Printf("" .. amount);

		for(int i; i<amount; i++)
		{
			Actor clone = owner.Spawn(owner.GetClassName(), owner.pos);

			if(clone)
			{
				clone.angle = owner.angle + random(0,360);
				clone.A_ChangeVelocity(random(10.0, -10.0), random(10.0, -10.0), random(5, 20), CVF_REPLACE);
				clone.A_GiveInventory("CCards_Actor_ClownCarInvulnerable", 1);
				clone.A_GiveInventory("CCards_Actor_MiniMonsterPowerup", 1);
				clone.bDONTOVERLAP = false;
				clone.bSOLID = false;
				
				if(owner.target && owner.target.bPICKUP)
				{
					clone.target = owner.target;
					clone.lastheard = owner.target;
				}

			}
		}

		owner.A_Quake(5, 20, 0, 1000, "");
		Destroy();
	}
}

Class CCards_Actor_ClownCarInvulnerable : PowerInvulnerable
{
	Default
	{
		powerup.duration 5;
	}
}

Class CCards_Actor_ClownCarCurseEffect : CCards_Actor_FX
{
	Default
	{
		translation "CCards_ClownCarCurse";
		scale 2.0;
		alpha 1.0;	
	}

	states
	{
		Spawn:
		TNT1 A 0;
		TNT1 A 0 A_StartSound("corruptioncards/clown", flags: CHANF_NOSTOP, attenuation: ATTN_NONE);
		C_F0 GHI 5;
		TNT1 A 80;
		stop;
	}
}

Class CCard_DuplicationCurseMonster : CurseCard
{
	override void Init()
	{
	tier = 3; 
	description = "One monster is cursed. Killing it duplicates nearby monsters.";
	image = "CARD36";
	background = "";
	curseinv = "CCards_Actor_DuplicationCurse";
	addtag("newspawn");
	Super.Init();
	}
}

Class CCards_Actor_DuplicationCurse : powerup
{
	Default
	{
		powerup.duration 0x7FFFFFFF;
	}

	override void InitEffect()
	{
		Actor fx = owner.Spawn("CCards_Actor_DuplicationCurseEffect", owner.pos);
		fx.target = owner;
	}

	override void OwnerDied()
	{
		if(!owner)
		{
			return;
		}

		Actor t;

		ThinkerIterator ti = ThinkerIterator.Create("Actor");
		
		int count;

		while (t = Actor(ti.Next()))
		{
			if(count > 30)
			{
				break;
			}

			if(t == owner || !CCards_Functions.IsLegalMonster(t) || t.health<1 ||
			t.Countinv("CCards_Actor_DuplicatedMonster")>0)
			{
				continue;
			}

			if(CCards_Functions.HasMapSpecial(t.GetClass()))
			{
				continue;
			}

			if(t.Distance2D(owner) > 600)
			{
				continue;
			}
			
			for(int i; i<3; i++)
			{
				Actor copy = t.Spawn(t.GetClassName(), t.pos);
				
				copy.GiveInventory("CCards_Actor_DuplicatedMonster", 1);
				copy.GiveInventory("CCards_Actor_SolidHelper", 1);
				copy.bDONTOVERLAP = false;

				t.Spawn("CCards_Actor_DuplicateFX", t.pos);
                copy.Spawn("CCards_Actor_DuplicateFX", copy.pos);
				count++;

				if(owner.target && owner.target.bPICKUP)
				{
					copy.target = owner.target;
					copy.lastheard = owner.target;
				}
			}
		}
		owner.A_Quake(5, 20, 0, 1000, "");
		Destroy();
	}
}

Class CCards_Actor_DuplicationCurseEffect : CCards_Actor_FX
{
	Default
	{
		translation "CCards_DuplicationCurse";
		scale 2.0;
		alpha 0.7;	
		renderstyle "Add";
		deathsound "corruptioncards/curse";
		+ROLLSPRITE;
	}

	bool end;

	states
	{
		Spawn:
        TNT1 A 0;
        TNT1 A 0 A_StartSound("corruptioncards/curseloop", flags:CHANF_LOOP);
        FX:
		C_FX AAAABBBB 1
		{
			if(target && target.health>0)
			{
				warp(target, zofs:target.height/2, flags:WARPF_NOCHECKPOSITION|WARPF_INTERPOLATE);
			}
			else
			{
				SetStateLabel("Death");
			}
		} 
		loop;
		Death:
		TNT1 A 0 
		{ 
			A_StartSound(deathsound, flags: CHANF_NOSTOP, attenuation: ATTN_NONE);
			roll = 0;
			end = true;
		}
		C_F0 VWXYZ 5;
		TNT1 A 80;
		stop;
	}

	override void Tick()
	{
		if(!end)
		{
			A_SetRoll(roll - 1.7);
		}
		Super.Tick();
	}
}

Class CCards_Actor_DuplicateFX : CCards_Actor_SpawnFire
{
	Default
	{
	translation "CCards_DuplicationCurse";
	renderstyle "Add";
	}
}


Class CCards_Actor_DuplicatedMonster : Inventory
{
}

Class CCard_LethalityCurseMonster : Cursecard
{
	override void Init()
	{
	tier = 5; 
	description = "One monster is cursed. Killing it drastically lowers your health.";
	image = "CARD38";
	background = "";
	curseinv = "CCards_Actor_LethalityCurse";
	mapspecialsafe = true;
	Super.Init();
	}
}

Class CCards_Actor_LethalityCurse : powerup
{
	Default
	{
		powerup.duration 0x7FFFFFFF;
	}

	override void InitEffect()
	{
		Actor fx = owner.Spawn("CCards_Actor_LethalityCurseEffect", owner.pos);
		fx.target = owner;
	}

	override void OwnerDied()
	{
		if(!owner)
		{
			return;
		}

		for(int i; i<players.Size(); i++)
		{
			if(players[i].mo && players[i].mo.health > 0)
			{
				players[i].mo.health = Max(1, players[i].health * 0.1);
                players[i].health = Max(1, players[i].health * 0.1);
                players[i].mo.GiveInventory("CCards_Actor_Lethality", 1);
                players[i].mo.A_Quake(5, 20, 0, 1000, "");
                players[i].mo.A_StartSound("corruptioncards/curse");
			}
		}

		Destroy();
	}
}

class CCards_Actor_Lethality : PowerProtection
{
    Default
    {
        powerup.duration 35;
        Powerup.Colormap 1.0, 0.0, 0.0, 0.0, -1.0, -1.0;
		DamageFactor "Normal", 0.0;
    }
}

Class CCards_Actor_LethalityCurseEffect : CCards_Actor_DuplicationCurseEffect
{
	Default
	{
		translation "CCards_LethalityCurse";
		scale 2.5;
		alpha 0.9;	
		renderstyle "Add";
		deathsound "corruptioncards/curse";
	}
}


Class CCard_ResurrectionCurseMonster : CurseCard
{
	override void Init()
	{
	tier = 2; 
	description = "One monster is cursed. Killing it resurrects nearby monsters.";
	image = "CARD39";
	background = "";
	curseinv = "CCards_Actor_ResurrectionCurse";
	AddTag("causesresurrection");
	Super.Init();
	}

	override bool Condition()
	{
		if(CCards_Functions.CountResurrectables() < 5)
		{
			return false;
		}
		return Super.Condition();
	}
}

Class CCards_Actor_ResurrectionCurse : powerup
{
	Default
	{
		powerup.duration 0x7FFFFFFF;
	}

	override void InitEffect()
	{
		Actor fx = owner.Spawn("CCards_Actor_ResurrectionCurseEffect", owner.pos);
		fx.target = owner;
	}

	override void OwnerDied()
	{
		if(!owner)
		{
			return;
		}

		Actor t;
		ThinkerIterator ti = ThinkerIterator.Create("Actor");

		while (t = Actor(ti.Next()))
		{
			if(t == owner || !CCards_Functions.IsLegalMonster(t) || t.health>0)
			{
				continue;
			}

			if(CCards_Functions.HasMapSpecial(t.GetClass()))
			{
				continue;
			}

			if(t.Distance2D(owner) > 600)
			{
				continue;
			}

			t.RaiseActor(t);
			t.Spawn("CCards_Actor_ResurrectionFX", t.pos);
		}
		owner.A_Quake(5, 20, 0, 1000, "");
		Destroy();
	}
}

Class CCards_Actor_ResurrectionCurseEffect : CCards_Actor_FX
{
	Default
	{
		translation "CCards_ResurrectionCurse";
		scale 2.0;
		alpha 0.7;	
		renderstyle "Add";
		deathsound "corruptioncards/curse";
		+ROLLSPRITE;
	}

	bool end;

	states
	{
		Spawn:
        TNT1 A 0;
        TNT1 A 0 A_StartSound("corruptioncards/curseloop", flags:CHANF_LOOP);
        FX:
		C_FX AAAABBBB 1
		{
			if(target && target.health>0)
			{
				warp(target, zofs:target.height/2, flags:WARPF_NOCHECKPOSITION|WARPF_INTERPOLATE);
			}
			else
			{
				end = true;
				roll = 0;
				SetStateLabel("Death");
			}
		} 
		loop;
		Death:
		BFE1 A 0 A_StartSound(deathsound, flags: CHANF_NOSTOP, attenuation: ATTN_NONE);
		BFE1 ABCDEF 5;
		TNT1 A 80;
		stop;
	}

	override void Tick()
	{
		if(!end)
		{
			A_SetRoll(roll - 1.7);
		}
		Super.Tick();
	}
	
}

Class CCards_Actor_ResurrectionFX : CCards_Actor_SpawnFire
{
	Default
	{
	translation "CCards_ResurrectionCurse";
	renderstyle "Add";
	}
}

Class CCard_RocketeerMonster : Cursecard
{	
	override void Init()
	{
	tier = 4; 
	description = "One monster is cursed, it rockets around uncontrollably.";
	image = "CARD45";
	background = "";
	curseinv = "CCards_Actor_Rocketeer";
	Addtag("addspecialmonster");
	Super.Init();
	}

}

Class CCards_Actor_Rocketeer : powerup
{
	Default
	{
		powerup.duration 0x7FFFFFFF;
	}

	bool isdead;

	override void DoEffect()
	{
		if(!owner || owner.health < 1)
		{
			isdead = true;
			return;
		}

		if(isdead)
		{
			StartSound();
		}

		float zvel = frandom(-5, 7);

		if(owner && owner.pos.z - owner.floorz > 360)
		{
			zvel = frandom(-1, 0);
		}

		owner.A_ChangeVelocity(frandom(-1.5, 2.5), frandom(-1.5, 2.5), zvel, CVF_RELATIVE);
		owner.A_SpawnItemEx("CCards_Actor_JetFire", -2, 0, height / 3, 0, 0, -8);
	}

	override void InitEffect()
	{
		owner.bFLOAT = true;
		owner.floatspeed = 0;
		owner.bDROPOFF = true;
		owner.bCANPASS = true;
		owner.bNOTARGET = true;
		owner.bNOINFIGHTING = true;
		owner.bNOBLOCKMONST = true;
		owner.bNOGRAVITY = true;

		StartSound();
	}

	void StartSound()
	{
		owner.A_StartSound("corruptioncards/rocketeer", CHAN_7, CHANF_LOOPING);
	}

	override void OwnerDied()
	{
		if(!owner)
		{
			return;
		}

		owner.A_StopSound(CHAN_7);
	}
}

Class CCard_MirrorCurseMonster : Cursecard
{
	override void Init()
	{
	tier = 2; 
	description = "One monster is cursed. Killing it mirrors your world.";
	image = "TNT1A0";
	background = "CARD50";
	curseinv = "CCards_Actor_MirrorCurse";
	mapspecialsafe = true;
	Addtag("confusion");
	Super.Init();
	}

	override bool Condition()
	{
		if(Multiplayer)
		{
			return false;
		}
		return Super.Condition();
	}
}

Class CCards_Actor_MirrorCurse : powerup
{
	Default
	{
		powerup.duration 0x7FFFFFFF;
	}

	override void InitEffect()
	{
		Actor fx = owner.Spawn("CCards_Actor_MirrorCurseEffect", owner.pos);
		fx.target = owner;
	}

	override void OwnerDied()
	{
		if(!owner)
		{
			return;
		}

		for(int i; i<players.Size(); i++)
		{
			if(players[i].mo && players[i].mo.health > 0)
			{
				if(players[i].mo.CountInv("CCards_Actor_FlipperInventory") == 0)
				{
					players[i].mo.GiveInventory("CCards_Actor_FlipperInventory", 1);
				}
				else
				{
					players[i].mo.TakeInventory("CCards_Actor_FlipperInventory", 1);
				}
                
                players[i].mo.A_Quake(5, 20, 0, 1000, "");
                S_Sound("corruptioncards/mirrorcurse", CHAN_7);//players[i].mo.A_StartSound("corruptioncards/mirrorcurse");
			}
		}	

		Destroy();	
	}
}

Class CCards_Actor_MirrorCurseEffect : CCards_Actor_DuplicationCurseEffect
{
	Default
	{
		translation "CCards_MirrorCurse";
		scale 2.0;
		alpha 0.7;	
		renderstyle "Add";
		deathsound "corruptioncards/curse";
	}
}

Class CCards_Mirror : EventHandler
{
	private ui bool enabled;

	override void UITick()
	{
		if (players[consoleplayer].mo.FindInventory("CCards_Actor_FlipperInventory"))
		{
			Shader.SetEnabled(players[consoleplayer], "cc_flipper", true);
		}
		else
		{
			Shader.SetEnabled(players[consoleplayer], "cc_flipper", false);
		}
	}
}

Class CCard_InvisCurseMonster : CurseCard
{
	override void Init()
	{
	tier = 3; 
	description = "One monster is cursed. It is completely invisible.";
	image = "TNT1A0";
	background = "CARD51";
	curseinv = "CCards_Actor_InvisibilityCurse";
	mapspecialsafe = true;
	Addtag("deception");
	Addtag("addspecialmonster");
	Super.Init();
	}
}

Class CCards_Actor_InvisibilityCurse : powerup
{
	Default
	{
		powerup.duration 0x7FFFFFFF;
	}

	override void Tick()
	{
		if(!owner || owner.health<1)
		{
			return;
		}

		CCards_ActorTools.InvisProperty(owner, true);
		owner.A_SetRenderStyle(0.0, STYLE_NONE);
		owner.bSHADOW = true;
	}
	
	override void OwnerDied()
	{
		if(!owner)
		{
			return;
		}

		owner.A_SetRenderStyle(1.0, STYLE_NORMAL);
		CCards_ActorTools.InvisProperty(owner, false);
		owner.bSHADOW = false;
		owner.Spawn("CCards_Actor_IllusionBreak", owner.pos);
		for(int i; i<4; i++)
		{
			owner.A_SpawnItemEx("CCards_Actor_InvisEndEffect", random(0,12), 1, 32, 0, 0, random(1, 7),random(0,360));
		}
	}
}

Class CCards_Actor_InvisEndEffect : CCards_Actor_Smoke
{
	Default
	{
		translation "CCards_MirrorCurse";
		scale 0.5;
		alpha 0.9;	
		renderstyle "Add";
	}
}


Class CCard_SwapCurseMonster : CurseCard
{
	override void Init()
	{
	tier = 3; 
	description = "";
	image = "TNT1A0";
	background = "CARD61";
	curseinv = "CCards_Actor_SwapCurse";
	mapspecialsafe = false;
	AddTag("rearrangemonsters");
	Super.Init();
	}
}

Class CCards_Actor_SwapInvulnerable : PowerInvulnerable
{
	Default
	{
		powerup.duration 2;
	}
}

class CCards_Actor_SwapCurseFX : CCards_Actor_FX
{
	Default
	{
		translation "CCards_WarpTrapTele";
		renderstyle "STYLE_Add";
		Alpha 0.8;
		+BRIGHT;
	}

	states
	{
		Spawn:
		TNT1 A 0;
		TNT1 A 0 A_StartSound("corruptioncards/swapwarp");
		C_F0 JKLMNOP 2;
		TNT1 A 5;
		stop;
	}

	static const String colors[] = {"", "CCards_WarpTrapTele", "CCards_GodMonster", "CCards_Anger", "CCards_Poison", "CCards_BlueRail"};

	override void Tick()
	{
		A_SetTranslation(colors[random(0,5)]);
		Super.Tick();
	}
}

Class CCards_Actor_SwapCurse : powerup
{
	Default
	{
		powerup.duration 0x7FFFFFFF;
	}

	Array<Actor> monsters;

	override void PostBeginPlay()
	{
		ThinkerIterator ti = ThinkerIterator.Create("Actor");
		Actor t;

		while (t = Actor(ti.Next()))
		{
			if(!CCards_Functions.IsLegalMonster(t) || CCards_Functions.ActorHasMapSpecial(t) || t == owner)
			{
				continue;
			}

			monsters.Push(t);
		}
	}

	override void Tick()
	{
		if(!owner || owner.health<1)
		{
			return;
		}

		if((Level.Time % 28) == 0)
		{
			for(int i; i < 10; i++)
			{
				int r = random(0, monsters.Size()-1);

				if(monsters.Size() == 0)
				{
					Destroy();
					return;
				}

				if(!monsters[r] || monsters[r].health<1)
				{
					monsters.Delete(r, 1);
					continue;
				}

				
				if(SwapPos(owner, monsters[r]))
				{
					owner.GiveInventory("CCards_Actor_SwapInvulnerable", 1);
					monsters[r].GiveInventory("CCards_Actor_SwapInvulnerable", 1);
					owner.A_SpawnItemEx("CCards_Actor_SwapCurseFX");
					monsters[r].A_SpawnItemEx("CCards_Actor_SwapCurseFX");
					break;
				}
			}
		}
	}
	
	bool SwapPos(actor a, actor b)
	{
		if(CCards_Functions.HasMapSpecial(a.GetClass()) || CCards_Functions.HasMapSpecial(b.GetClass()))
		{
			return false;
		}

		Vector3 apos = a.pos;
		Vector3 bpos = b.pos;
		float aangle = a.angle;
		float bangle = b.angle;
		bool aambush = a.bAMBUSH;
		bool bambush = b.bAMBUSH;
			
		if(b.height > Abs(apos.z - a.ceilingz))
		{
			//Console.Printf(b.height .. " vs " .. Abs(apos.z - a.ceilingz));
			return false;
		}

		if(a.height > Abs(bpos.z - b.ceilingz))
		{
			//Console.Printf(a.height .. " vs " .. Abs(bpos.z - b.ceilingz));
			return false;
		}

		a.SetOrigin(bpos, false);
		b.SetOrigin(apos, false);

		if(a.CheckBlock() || b.CheckBlock() || 
		!CCards_Safespawner.CheckCorners(a.pos, a.radius) || !CCards_Safespawner.CheckCorners(b.pos, b.radius))
		{
			a.SetOrigin(apos, false);
			b.SetOrigin(bpos, false);
			return false;
		}
		
		a.angle = bangle;
		b.angle = aangle;

		a.bambush = bambush;
		b.bambush = aambush;

		return true;
	}

	override void OwnerDied()
	{
		if(!owner)
		{
			return;
		}
	}
}

Class CCard_NuclearCurseMonster : CurseCard
{
	override void Init()
	{
	tier = 2; 
	image = "TNT1A0";
	background = "CARD62";
	curseinv = "CCards_Actor_NuclearCurse";
	mapspecialsafe = false;
	AddTag("hiddensurprise");
	Super.Init();
	}
}

class CCards_Actor_NuclearCurse : Inventory
{
	override void Tick()
	{
		if(owner && owner.health < 1)
		{	
			CCards_Actor_NuclearBombDeath s = CCards_Actor_NuclearBombDeath(owner.Spawn("CCards_Actor_NuclearBombDeath", owner.pos));
			if(owner.CountInv("CCards_Actor_NuclearReaction") > 0)
			{
				//s.bAMBUSH = true; ITS TOO NUTS
			}
			s.angle = owner.angle;
			s.sprite =  owner.sprite;
			s.frame =  owner.frame;

			if(owner.painsound)
			{
				s.painsound = owner.painsound;
			}

			s.A_SetSize(owner.default.radius, owner.default.height, false);
			s.scale = owner.scale;
			
			owner.A_Remove(AAPTR_DEFAULT);
			Destroy();
			return;
		}
	}
}

Class CCards_Actor_NuclearBombDeath : Actor
{
	Default
	{
		-SHOOTABLE;
		-SOLID;
		gravity 0.5;
	}

	float basex;
	float basey;
	int growtime;
	uint soundtime;
	uint sounddec;
	float spitch;

	states
	{
		Spawn:
		"####" "#" 0;
		"####" "#" 0
		{
			if(bAMBUSH)
			{
				Spawn("CCards_NukeExplosion", pos + (0,0,48));
				A_StopSound(CHAN_7);
				Destroy();
				return;
			}
			basex = scale.x;
			basey = scale.y;
			A_Quake(3, 35*6, 0, 1000, "");
			sounddec = 38;
			soundtime = 37;
			spitch = 0.7;
			A_StartSound("corruptioncards/nukegrow", CHAN_7, CHANF_OVERLAP, 1.0, ATTN_NONE);
		}
		Growing:
		"####" "#" 1
		{
			A_SetScale(scale.x + basex * (0.015 - (cos(Level.Time * 20) * 0.08)), scale.y + basey * (0.013 + (cos(Level.Time * 20) * 0.08)));
			growtime++;

			if(growtime == (35 * 6) - 1)
			{
				A_RadiusGive("CCards_Actor_NuclearReaction", 9000, RGF_MONSTERS|RGF_NOSIGHT, 1);
			}

			if(growtime == 35*6)
			{
				Spawn("CCards_NukeExplosion", pos + (0,0,48));
				A_StopSound(CHAN_7);
				Destroy();
				return;
			}

			switch(Level.Time%3)
			{
				Case 0: A_SetTranslation("CCards_FireTrap"); break;
				Case 1: A_SetTranslation("CCards_BloodRain"); break;
				Case 2: A_SetTranslation("CCards_Shield"); bBRIGHT = !bBRIGHT; break;
			}

			soundtime++;
			
			if(soundtime == sounddec)
			{
				soundtime = sounddec;
				sounddec -= 3;
				A_StartSound(painsound, CHAN_VOICE, CHANF_OVERLAP, 1.0, ATTN_NONE);
				A_SoundPitch(CHAN_VOICE, spitch);
				spitch += 0.1;
				soundtime = 0;
			}
		}
		loop;
	}
}

Class CCards_NukeExplosion : CCards_Actor_FX
{
	Default
	{
		scale 7.0;
		//Translation "CCards_FireTrap";
		obituary "%o could not get out of the way of a monster's nuclear explosion.";
		renderstyle "STYLE_ADD";
		alpha 0.8;
		+BRIGHT;
	}

	States
	{
		Spawn:
		TNT1 A 0;
		TNT1 A 0 
			{
			int power = 1800;
			int fx = 0;

			Actor t;

			ThinkerIterator ti = ThinkerIterator.Create("Actor");
			uint fxcount;
			
			while (t = Actor(ti.Next()))
			{
				if(t.GetClassName() == "CCards_NukeExplosion")
				{
					fxcount++;
				}

				if(!t.bSHOOTABLE || t.health < 1)
				{
					continue;
				}

				if(Distance2D(t) < 400)
				{
					t.DamageMobj(self, self, 9000, "normal", DMG_FORCED|DMG_FOILINVUL|DMG_FOILBUDDHA|DMG_NO_PROTECT|DMG_EXPLOSION);
				}
			}

			if(!CheckSightOrRange(1000, true) && fxcount < 8)
			{	
				for(int i; i<90; i++)
				{
					A_SpawnItemEx("CCards_NukeSmoke", 0,0,-60 + (random(-10,10))-power/20,	random(-10,10)+power/70,0,0, i*4, SXF_NOCHECKPOSITION, fx);
					A_SpawnItemEx("CCards_NukeSmoke", 0,0,-30 + (random(-10,10))-power/20,	random(-10,10)+power/60,0,0, i*4, SXF_NOCHECKPOSITION, fx);
					A_SpawnItemEx("CCards_NukeSmoke", 0,0,	0  + (random(-10,10)),			random(-10,10)+power/50,0,0, i*4, SXF_NOCHECKPOSITION, fx);
					A_SpawnItemEx("CCards_NukeSmoke", 0,0, 30 + (random(-10,10))+power/20,	random(-10,10)+power/60,0,0, i*4, SXF_NOCHECKPOSITION, fx);
					A_SpawnItemEx("CCards_NukeSmoke", 0,0, 60 + (random(-10,10))+power/20,	random(-10,10)+power/70,0,0, i*4, SXF_NOCHECKPOSITION, fx);
					
					A_SpawnItemEx("CCards_NukeFire", 0,0,-60 + (random(-10,10))-power/20,	random(-10,10)+power/80,0,0, i*4, SXF_NOCHECKPOSITION, fx);
					A_SpawnItemEx("CCards_NukeFire", 0,0,-30 + (random(-10,10))-power/20,	random(-10,10)+power/60,0,0, i*4, SXF_NOCHECKPOSITION, fx);
					A_SpawnItemEx("CCards_NukeFire", 0,0, 0  + (random(-10,10)),			random(-10,10)+power/50,0,0, i*4, SXF_NOCHECKPOSITION, fx);
					A_SpawnItemEx("CCards_NukeFire", 0,0, 30 + (random(-10,10))+power/20,	random(-10,10)+power/60,0,0, i*4, SXF_NOCHECKPOSITION, fx);
					A_SpawnItemEx("CCards_NukeFire", 0,0, 60 + (random(-10,10))+power/20,	random(-10,10)+power/80,0,0, i*4, SXF_NOCHECKPOSITION, fx);
				}
			}

			A_Explode(9000, 1500, XF_NOTMISSILE, false, 500);	

			A_StartSound("corruptioncards/nukeexplode", CHAN_7, CHANF_OVERLAP, 1.0, ATTN_NONE);
			A_Quake(8, 40, 0, 10000, "");

		}
		C_F1 BCDEFGH 3;
		TNT1 A 2;
		TNT1 A 80;
		stop;
	}
}

Class CCards_Actor_NuclearReaction : Powerup
{
	Default
	{
		powerup.duration 10;
	}

	override void OwnerDied()
	{
		return;
	}
}

Class CCards_NukeSmoke : CCards_Actor_FX
{
	Default
	{
		Renderstyle "Translucent";
		Alpha 0.2;
		+RANDOMIZE;
		+FORCEXYBILLBOARD;
		+ROLLSPRITE;
	}

	States
	{
		Spawn:
			C_F2 A 8 
			{
				A_FadeTo (0, 0.02, 1);
			}
			loop;
	}

	override void Tick()
	{
		Super.Tick();
		roll += 0.6;
	}
}

Class CCards_NukeFire : CCards_Actor_FX
{
	Default
	{
		Renderstyle "Translucent";
		Alpha 0.2;
		+RANDOMIZE;
		+FORCEXYBILLBOARD;
		+ROLLSPRITE;
		+BRIGHT;
		scale 1.25;
	}

	States
	{
		Spawn:
			C_F1 BCDEFGH 6
			{
				A_FadeTo (0, 0.01, 1);
			}
		stop;
	}

	override void Tick()
	{
		Super.Tick();
		roll += 1.5;
	}
}


Class CCard_EnchantCurseMonster : CurseCard
{
	override void Init()
	{
	tier = 3; 
	image = "CARD66";
	background = "";
	curseinv = "CCards_Actor_EnchantCurse";
	AddTag("randombuff");
	Super.Init();
	}
}

Class CCards_Actor_EnchantCurse : powerup
{
	Default
	{
		powerup.duration 0x7FFFFFFF;
	}

	override void InitEffect()
	{
		Actor fx = owner.Spawn("CCards_Actor_EnchantCurseEffect", owner.pos);
		fx.target = owner;
	}

	override void OwnerDied()
	{
		if(!owner)
		{
			return;
		}

		Actor t;

		ThinkerIterator ti = ThinkerIterator.Create("Actor");
		
		int count;

		while (t = Actor(ti.Next()))
		{
			if(count > 30)
			{
				break;
			}

			if(t == owner || !CCards_Functions.IsLegalMonster(t) || t.health<1)
			{
				continue;
			}

			if(t.Distance2D(owner) > 600)
			{
				continue;
			}
			
			CCards_BuffManager.ApplyRandomBuff(t);
			CCards_BuffManager.ApplyRandomBuff(t);
		}

		owner.A_Quake(5, 20, 0, 1000, "");
		Destroy();
	}
}

Class CCards_Actor_RainbowCurseEffect : CCards_Actor_FX
{
	states
	{
		Spawn:
		TNT1 A 0;
		Looping:
		TNT1 # 35;
		stop;
	}
}

Class CCards_Actor_EnchantCurseEffect : CCards_Actor_DuplicationCurseEffect
{
	Default
	{
		//translation "CCards_LethalityCurse";
		scale 2.5;
		alpha 0.9;	
		renderstyle "Add";
		deathsound "corruptioncards/curse";
	}

	CCards_Actor_RainbowCurseEffect r;
	uint rn;

	override void Tick()
	{
		if(Getage() == 1)
		{
			if(!r)
			{
				r = CCards_Actor_RainbowCurseEffect(Spawn("CCards_Actor_RainbowCurseEffect", pos));
			}
		}

		if(GetAge() % 5 == 0)
		{
			String n;
			rn++;
			if(r && !end)
			{
				r.frame = rn;
				r.Warp(self);
				r.SetStateLabel("Looping");
			}
			switch(rn)
			{
				Case 0: n = "CCards_Red"; break;
				Case 1: n = "CCards_Green"; break;
				Case 2: n = "CCards_Blue"; break;
				Case 3: n = "CCards_Yellow"; break;
				Case 4: n = "CCards_Cyan"; break;
				Case 5: n = "CCards_Purple"; break;
			}

			A_SetTranslation(n);

			if(rn>5)
			{
				rn = 0;
			}
		}

		if(!end)
		{
			A_SetRoll(roll - 1.7);
		}
		else
		{
			if(r)
			{
				r.A_Remove(AAPTR_DEFAULT);
			}
		}

		Super.Tick();
	}
}

Class CCard_9LivesMonster : CurseCard
{
	override void Init()
	{
	tier = 3; 
	image = "CARD72";
	background = "";
	curseinv = "CCards_Actor_9LivesCurse";
	AddTag("addspecialmonster");
	Super.Init();
	}
}

Class CCards_Actor_9LivesCounter : CCards_Token
{
	Default
	{
		inventory.maxamount 9;
	}
}

Class CCards_Actor_9LivesCurse : powerup
{
	Default
	{
		powerup.duration 0x7FFFFFFF;
	}

	override void OwnerDied()
	{
		if(!owner)
		{
			return;
		}

		if(owner.health < -900000)
		{
			Destroy();
			return;
		}

		uint lives = owner.CountInv("CCards_Actor_9LivesCounter");

		if(lives == 8)
		{
			Destroy();
			return;
		}

		CCards_Actor_9LivesSpawner a = CCards_Actor_9LivesSpawner(Spawn("CCards_Actor_9LivesSpawner"));
		a.classname = owner.GetClassName();
		a.lives = lives;
		if(owner.target)
		{
			a.target = owner.target;
		}

		Destroy();
	}
}

Class CCards_Actor_9LivesSpawner : CCards_AssassinSpawn
{
	CCards_SafespawnerCallback spawnercallback;
	String classname;
	uint lives;

	States
	{
		Spawn:
		TNT1 A 0;
		TNT1 A 0 A_SetTics(random(1, 5) * 35);
		TNT1 A 1 
		{
			CCards_Actor_SafeSpawner s = CCards_Safespawner.New(classname, 1, "CCards_Actor_9LivesSpawnFX", 0, 0, 128, 0);
			if(!s)
			{
				return;
			}

			spawnercallback = new("CCards_SafespawnerCallback");
			spawnercallback.spawner = s;
			s.spawnercallback = spawnercallback;
			//Console.PRintf("" .. lives);
			s.GiveInventory("CCards_Actor_9LivesCounter", lives + 1);

			s.GiveInventory("CCards_Actor_9LivesCurse", 1);
			if(target)
			{
				s.SetSpawnLocation(target);
			}
			//Console.Printf("cat!");
		}
		Waiting:
		TNT1 A 5
		{
			Actor t = spawnercallback.spawnedactor;
			if(t)
			{
				t.SetTag(t.GetTag() .. " \c-(\cklife " .. lives + 2 .. "\c-)");
				t.target = target;
				t.lastheard = target;
				Destroy();
				return;
			}
		}
		loop;
	}
}

class CCards_Actor_9LivesSpawnFX : CCards_Actor_SpawnFire
{
	Default
	{
		Translation "CCards_Shield";
		+BRIGHT;
		Renderstyle "Style_Add";
		alpha 0.6;
	}

	states
	{
		Spawn:
		TNT1 A 0;
		TNT1 A 0 A_StartSound("corruptioncards/catresurrect");
		Goto Super::Spawn;
	}
}

Class CCard_MiasmaCurseMonster : Cursecard
{
	override void Init()
	{
	tier = 2;
	image = "CARD76";
	background = "";
	curseinv = "CCards_Actor_MiasmaCurse";
	mapspecialsafe = true;
	AddTag("hazard");
	Super.Init();
	}
}

Class CCards_Actor_MiasmaCurse : powerup
{
	Default
	{
		powerup.duration 0x7FFFFFFF;
	}

	override void InitEffect()
	{
		Actor fx = owner.Spawn("CCards_Actor_MiasmaCurseEffect", owner.pos);
		fx.target = owner;
	}

	override void OwnerDied()
	{
		if(!owner)
		{
			return;
		}

		Spawn("CCards_Actor_MiasmaEffect", owner.pos);

		Destroy();
		return;
	}
}

Class CCards_Actor_MiasmaEffect : CCards_Actor_FX
{
	const effectradius = 400;

	states
	{
		Spawn:
		TNT1 A 1;
		TNT1 A 0 {Flood();}
		TNT1 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA 1
		{
			int rad = effectradius * 2;
			for(int i; i < 32; i++)
			{
				Vector2 pos = (pos.x + random(-rad, rad), pos.y + random(-rad, rad));

				CCards_Actor_Smoke s = CCards_Actor_Smoke(Spawn("CCards_Actor_Smoke", (pos.x, pos.y, 0)));
				String tex = TexMan.GetName(s.cursector.GetTexture(0));

				if(tex == "CC_MFI")
				{
					s.SetOrigin((s.pos.x, s.pos.y, s.floorz), false);
					s.A_SetScale(0.7, 0.7);
					s.A_ChangeVelocity(0, 0, 2);
					s.A_SetTranslation("CCards_MiasmaCurse");
				}
				else
				{
					s.Destroy();
				}
			}
		}
		stop;
	}

	void FloodSector(Sector s)
	{
		s.DamageAmount = 5;
		s.DamageInterval = 35;
		s.DamageType = "Slime";
		s.SetTexture(0, Texman.CheckForTexture("CC_MFI", TexMan.TYPE_ANY), 0);

		return;

		for(int l; l<s.Lines.Size(); l++)
		{
			if(s.Lines[l].Sidedef[1] && s.Lines[l].special == 0)
			{
				s.Lines[l].Sidedef[0].SetTexture(Side.Bottom, Texman.CheckForTexture("CC_MFI", TexMan.TYPE_ANY));
				s.Lines[l].Sidedef[1].SetTexture(Side.Bottom, Texman.CheckForTexture("CC_MFI", TexMan.TYPE_ANY));
			}
		}
	}

	void Flood()
	{
		FloodSector(cursector);

		for(int i; i<level.sectors.Size(); i++)
		{
			for(int v; v<level.sectors[i].lines.Size(); v++)
			{
				if((level.sectors[i].lines[v].V1.P - (pos.x, pos.y)).Length() < effectradius)
				{
					FloodSector(level.sectors[i]);
					continue;
				}

				if((level.sectors[i].lines[v].V2.P - (pos.x, pos.y)).Length() < effectradius)
				{
					FloodSector(level.sectors[i]);
					continue;
				}
			}

			if((level.sectors[i].CenterSpot - (pos.x, pos.y)).Length() < effectradius)
			{
				FloodSector(level.sectors[i]);
			}
		}
	}
}

Class CCards_Actor_MiasmaCurseEffect : CCards_Actor_DuplicationCurseEffect
{
	Default
	{
		translation "CCards_MiasmaCurse";
		scale 2.5;
		alpha 0.9;	
		renderstyle "Add";
		deathsound "corruptioncards/curse";
	}
}


Class CCard_SeedCurse : Cursecard
{
	override void Init()
	{
	tier = 1;
	image = "CARD79";
	background = "";
	curseinv = "CCards_Actor_SeedCurse";
	mapspecialsafe = true;
	AddTag("hiddensurprise");
	Addtag("confusion");
	Super.Init();
	}
}

Class CCards_Actor_SeedCurse : powerup
{
	Default
	{
		powerup.duration 0x7FFFFFFF;
	}

	override void OwnerDied()
	{
		if(!owner)
		{
			return;
		}

		Spawn("CCards_Actor_SeedCurseEffect", owner.pos);
		
        S_Sound("corrptioncards/overgrowth", CHAN_7);

		Actor p;

		if(owner.target && owner.target.player)
		{
			p = owner.target;
		}
		else
		{
			p = CCards_Functions.RandomPlayer();
		}

		if(p && owner.Distance2D(p) > 200)
		{
			Actor s = p.Spawn("CCards_Actor_SeedCurseEffect", owner.pos);
			s.tracer = p;
		}

		Destroy();
		return;
	}
}

Class CCards_Actor_SeedCurseEffect : Actor
{
	Default
	{
		+NOINTERACTION;
	}

	Actor b, c;

	States
	{
		Spawn:
		TNT1 A 2
		{
			Actor a = self;

			if(tracer)
			{
				Warp(tracer, flags:WARPF_NOCHECKPOSITION);
			}

			if(target)
			{
				a = target;
			}

			if(a)
			{
				if(b)
				{
					b = null;
					reactiontime++;
				}

				if(c)
				{
					c = null;
					reactiontime++;
				}
				
				//Console.Printf("" .. reactiontime);

				b = Spawn("CCards_Actor_OvergrowthBushBig", pos + (random(-400, 400), random(-400, 400)));
				c = Spawn("CCards_Actor_OvergrowthBushSmall", pos + (random(-400, 400), random(-400, 400)));

				if(reactiontime >= 45)
				{
					Destroy();
					return;
				}

				//a.A_SpawnItemEx("CCards_Actor_OvergrowthBushBig", random(-512, 512), random(-512, 512), flags:SXF_NOCHECKPOSITION);
				//a.A_SpawnItemEx("CCards_Actor_OvergrowthBushSmall", random(-512, 512), random(-512, 512), flags:SXF_NOCHECKPOSITION);
			}
		}
		loop;
	}
}

Class CCard_OverpoweredCurse : CurseCard
{
	override void Init()
	{
	tier = 3; 
	//description = "One monster is cursed. It recieves 5 random Card Enchantments.";
	image = "CARD81";
	background = "";
	curseinv = "CCards_Actor_OverpoweredCurse";
	AddTag("addspecialmonster");
	AddTag("randombuff");
	Super.Init();
	}

	override bool Condition()
	{
		let b = CCards_BuffManager.Get();

		if(b && b.buffs.Size() < 10)
		{
			return false;
		}
		return (Super.Condition());
	}
}

Class CCards_Actor_OverpoweredCurse : Powerup
{
	Default
	{
		powerup.duration -1;
	}

	Override void AttachToOwner(Actor a)
	{
		for(int i; i<10; i++)
		{
			CCards_BuffManager.ApplyRandomBuff(a);
		}
		Super.AttachToOwner(a);
	}
}


Class CCard_SpiderCurseMonster : CurseCard
{
	override void Init()
	{
	tier = 2; 
	image = "CARD102";
	background = "";
	curseinv = "CCards_Actor_SpiderCurse";
	Super.Init();
	}

	override bool Condition()
	{
		return Super.Condition();
	}
}

Class CCards_Actor_SpiderCurse : powerup
{
	Default
	{
		powerup.duration 0x7FFFFFFF;
	}

	override void InitEffect()
	{
		Actor fx = owner.Spawn("CCards_Actor_SpiderCurseEffect", owner.pos);
		fx.target = owner;
	}

	override void OwnerDied()
	{
		if(!owner)
		{
			return;
		}

		Actor t;
		ThinkerIterator ti = ThinkerIterator.Create("Actor");

		while (t = Actor(ti.Next()))
		{
			if(t == owner || !CCards_Functions.IsLegalMonster(t) || t.health>0)
			{
				continue;
			}

			if(t.Distance2D(owner) > 900)
			{
				continue;
			}

			t.GiveInventory("CCards_Actor_SpidersInfested", 1);
		}
		owner.GiveInventory("CCards_Actor_SpidersInfested", 1);
		owner.A_Quake(5, 20, 0, 1000, "");
		Destroy();
	}
}

Class CCards_Actor_SpiderCurseEffect : CCards_Actor_ResurrectionCurseEffect
{
	Default
	{
		translation "CCards_SpiderCurse";
		scale 1.7;
		alpha 0.6;	
		renderstyle "Add";
		deathsound "corruptioncards/curse";
	}

	states
	{
		Spawn:
        TNT1 A 0;
        TNT1 A 0 A_StartSound("corruptioncards/curseloop", flags:CHANF_LOOP);
        FX:
		C_FX AAAABBBB 1
		{
			if(target && target.health>0)
			{
				warp(target, zofs:target.height/2, flags:WARPF_NOCHECKPOSITION|WARPF_INTERPOLATE);
			}
			else
			{
				end = true;
				roll = 0;
				SetStateLabel("Death");
			}
		} 
		loop;
		Death:
		BFE1 A 0 A_StartSound(deathsound, flags: CHANF_NOSTOP, attenuation: ATTN_NONE);
		TNT1 A 0 A_SetTranslation("CCards_Anger");
		BFE1 ABCDEF 5;
		TNT1 A 80;
		stop;
	}
}


Class CCard_PolyMorphCurseMonster : CurseCard
{
	override void Init()
	{
	tier = 3; 
	image = "CARD103";
	background = "";
	curseinv = "CCards_Actor_PolymorphCurse";
	AddTag("rearrangemonsters");
	Super.Init();
	}

	override bool Condition()
	{
		return Super.Condition();
	}
}

Class CCards_Actor_PolymorphCurse : powerup
{
	Default
	{
		powerup.duration 0x7FFFFFFF;
	}

	override void InitEffect()
	{
		Actor fx = owner.Spawn("CCards_Actor_PolymorphCurseEffect", owner.pos);
		fx.target = owner;
	}

	override void OwnerDied()
	{
		if(!owner)
		{
			return;
		}

		Actor t;

		ThinkerIterator ti = ThinkerIterator.Create("Actor");
		
		int count;

		Array<Class<Actor> > mons;
		let ev = CCards_Functions.GetGame();
		for(int i; i<ev.global.foundMonsters.Size(); i++)
		{
			Class<Actor> f = ev.global.foundMonsters[i].monsterClass;
			if(f && !CCards_Functions.HasMapSpecial(f))
			{
				if(GetDefaultByType(f).bBOSS && random(0, 3) != 0)
				{
					continue;
				}
				mons.Push(f);
			}
		}

		while (t = Actor(ti.Next()))
		{
			if(t == owner || !CCards_Functions.IsLegalMonster(t) || t.health<1 || t.bBOSS ||
			t.Countinv("CCards_Actor_JustPolymorphed")>0)
			{
				continue;
			}

			if(CCards_Functions.HasMapSpecial(t.GetClass()))
			{
				continue;
			}

			if(t.Distance2D(owner) > 700)
			{
				continue;
			}

			int attempts;
			
			Array<Class<Actor> > cmons;
			cmons.Copy(mons);

			while(cmons.Size() > 0)
			{
				int r = random(0, cmons.Size() - 1);

				if(GetDefaultByType(cmons[r]).health < t.default.health && attempts < 2)
				{
					attempts++;
					continue;
				}

				if(t.default.bFLOAT && !GetDefaultByType(cmons[r]).bFLOAT && !t.target)
				{
					cmons.Delete(r);
					continue;
				}

				
				if(!CCards_Safespawner.CheckCorners(t.pos, GetDefaultByType(cmons[r]).radius))
				{
					cmons.Delete(r);
					continue;
				}

				if(t.A_SetSize(GetDefaultByType(cmons[r]).radius, GetDefaultByType(cmons[r]).height, true))
				{
					Actor a = Actor(Spawn(cmons[r], t.pos));
					a.angle = t.angle;
					a.vel = t.vel;
					a.target = t.target;
					a.lastheard = t.lastheard;
					a.GiveInventory("CCards_Actor_JustPolymorphed", 1);
					t.A_Remove(AAPTR_DEFAULT);

					for(int i = 0; i<4 + a.radius / 10; i++)
					{
						a.A_SpawnItemEx("CCards_Actor_Smoke", random(0, a.radius/2), 0, random(8, a.height+8), 1, 0, frandom(1, 3), random(0,360));
					}

					a.A_SpawnItemEx("CCards_Actor_IllusionBreak");
					break;
				}
				
				cmons.Delete(r);
			}
			
		}
		owner.A_Quake(5, 20, 0, 1000, "");
		Destroy();
	}
}

Class CCards_Actor_JustPolymorphed : Powerup
{
	Default
	{
		powerup.duration 5;
	}
}

Class CCards_Actor_PolymorphCurseEffect : CCards_Actor_DuplicationCurseEffect
{
	Default
	{
		translation "CCards_PolymoprhCurse";
		scale 2.5;
		alpha 0.9;	
		renderstyle "Add";
		deathsound "corruptioncards/polymorph";
	}
}